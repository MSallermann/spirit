#version 450

const float M_PI = 3.1415926535897932384626433832795;
const float M_SQRT1_2 = 0.70710678118654752440084436210485;

layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in;// 32, fft/8, 1: total <1024
layout (constant_id = 4) const uint fft_dim = 2048;

layout(push_constant) uniform PushConsts
{
	bool inverse;
	bool zeropad[2];
	uint inputStride[4];
	uint outputStride[4];
	uint radixStride[3];
	uint numStages;
	uint stageRadix[2];
	uint ratio[2];
	bool ratioDirection[2];	
	uint inputOffset;
	uint outputOffset;
	uint coordinate;
	
} consts;


layout(std430, binding = 0) buffer Data {
    vec2 inputs[];
};

layout(std430, binding = 1) buffer Data2 {
    vec2 outputs[];
};

uint indexInput(uint index_x, uint index_y, uint coordinate) {
    return consts.inputOffset+index_x * consts.inputStride[0] + index_y * consts.inputStride[1] + gl_GlobalInvocationID.z * consts.inputStride[2] + coordinate * consts.inputStride[3];
}
uint indexOutput(uint index_x, uint index_y, uint coordinate) {
    return consts.outputOffset+index_x * consts.outputStride[0] + index_y * consts.outputStride[1] + gl_GlobalInvocationID.z * consts.outputStride[2] + coordinate * consts.outputStride[3];
}

void radix2(inout vec2 values[2], vec2 w) {
    vec2 temp;
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
}

void radix4(inout vec2 values[4],inout vec2 w) {
	
	//DIF 1st stage with double angle
	vec2 temp;
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	//DIF 2nd stage with half angle
	w = normalize(w + vec2(1.0, 0.0));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	w = (consts.inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);

	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp = values[1];
	values[1]=values[2];
	values[2]=temp;
}

void radix8(inout vec2 values[8], inout vec2 w) {
	//DIF 1st stage with quadruple angle
	
	vec2 temp; 
	temp.x=values[4].x*w.x-values[4].y*w.y;
	temp.y=values[4].y*w.x+values[4].x*w.y;
	values[4]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[5].x*w.x-values[5].y*w.y;
	temp.y=values[5].y*w.x+values[5].x*w.y;
	values[5]=values[1]-temp;
	values[1]=values[1]+temp;
	
	temp.x=values[6].x*w.x-values[6].y*w.y;
	temp.y=values[6].y*w.x+values[6].x*w.y;
	values[6]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[3]-temp;
	values[3]=values[3]+temp;
	
	//DIF 2nd stage with double angle
	w = normalize(w + vec2(1.0, 0.0));
	
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	vec2 iw = (consts.inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);
    
	temp.x=values[6].x*iw.x-values[6].y*iw.y;
	temp.y=values[6].y*iw.x+values[6].x*iw.y;
	values[6]=values[4]-temp;
	values[4]=values[4]+temp;
	
	temp.x=values[7].x*iw.x-values[7].y*iw.y;
	temp.y=values[7].y*iw.x+values[7].x*iw.y;
	values[7]=values[5]-temp;
	values[5]=values[5]+temp;
	
	//DIF 3rd stage with angle
	w = normalize(w + vec2(1.0, 0.0));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	iw = (consts.inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);
	
	temp.x=values[3].x*iw.x-values[3].y*iw.y;
	temp.y=values[3].y*iw.x+values[3].x*iw.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	iw.x=(consts.inverse) ? w.x*M_SQRT1_2+w.y*M_SQRT1_2 : w.x*M_SQRT1_2-w.y*M_SQRT1_2;
	iw.y=(consts.inverse) ? w.y*M_SQRT1_2-w.x*M_SQRT1_2 : w.y*M_SQRT1_2+w.x*M_SQRT1_2;
   
	temp.x=values[5].x*iw.x-values[5].y*iw.y;
	temp.y=values[5].y*iw.x+values[5].x*iw.y;
	values[5]=values[4]-temp;
	values[4]=values[4]+temp;
	
	w = (consts.inverse) ? vec2(iw.y, -iw.x) : vec2(-iw.y, iw.x);
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[6]-temp;
	values[6]=values[6]+temp;
	
	temp = values[1];
	values[1]=values[4];
	values[4]=temp;
	
	temp = values[3];
	values[3]=values[6];
	values[6]=temp;

}


shared vec2 sdata[gl_WorkGroupSize.x*fft_dim];

void main() {
	//combine up to 16 ffts to avoid strided reads - no need to transpose. Threads: group(axis 0) - fft axis(1 or 2)/8 - 1
	if ((consts.zeropad[0])&&(!consts.inverse)){
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2*gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+2*gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3*gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+3*gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+4*gl_WorkGroupSize.y))]=vec2(0,0);
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+5*gl_WorkGroupSize.y))]=vec2(0,0);
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+6*gl_WorkGroupSize.y))]=vec2(0,0);
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+7*gl_WorkGroupSize.y))]=vec2(0,0);
	} else {
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2*gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+2*gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3*gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+3*gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+4*gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+4*gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+5*gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+5*gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+6*gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+6*gl_WorkGroupSize.y,consts.coordinate)];
		sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+7*gl_WorkGroupSize.y))]=inputs[indexInput(gl_GlobalInvocationID.x, gl_LocalInvocationID.y+7*gl_WorkGroupSize.y,consts.coordinate)];
	
	}

	memoryBarrierShared();
	barrier();
	
	vec2 temp[8];
	uint stageSize=1;
	float stageAngle=(consts.inverse) ? -M_PI : M_PI;		
	for (uint n=0; n < consts.numStages; n++){
		uint current_radix = (n<consts.numStages-1) ? consts.stageRadix[0] : consts.stageRadix[1];
		switch(current_radix){
			case 2:
			{
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);
				float angle = stageInvocationID * stageAngle;
				vec2 twiddleFactor = vec2(cos(angle), sin(angle));
				vec2 values[2];
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+consts.radixStride[0])+gl_LocalInvocationID.x];
				
				radix2(values, twiddleFactor);
				
				temp[0]=values[0];
				temp[4]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				twiddleFactor = vec2(cos(angle), sin(angle));
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y+consts.radixStride[0])+gl_LocalInvocationID.x];
				
				radix2(values, twiddleFactor);
				
				temp[1]=values[0];
				temp[5]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.y+2*gl_WorkGroupSize.y) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				twiddleFactor = vec2(cos(angle), sin(angle));
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2*gl_WorkGroupSize.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2*gl_WorkGroupSize.y+consts.radixStride[0])+gl_LocalInvocationID.x];
				
				radix2(values, twiddleFactor);
				
				temp[2]=values[0];
				temp[6]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.y+3*gl_WorkGroupSize.y) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				twiddleFactor = vec2(cos(angle), sin(angle));
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3*gl_WorkGroupSize.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3*gl_WorkGroupSize.y+consts.radixStride[0])+gl_LocalInvocationID.x];
				
				radix2(values, twiddleFactor);
				
				temp[3]=values[0];
				temp[7]=values[1];

				break;
			}
			case 4:
			{
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);;
				float angle = float(stageInvocationID) * stageAngle;
				vec2 twiddleFactor = vec2(cos(angle), sin(angle));
				vec2 values[4];
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+ consts.radixStride[1])+gl_LocalInvocationID.x];
				values[2] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2 * consts.radixStride[1])+gl_LocalInvocationID.x];
				values[3] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3* consts.radixStride[1])+gl_LocalInvocationID.x];
				
				radix4(values, twiddleFactor);
				
				temp[0]=values[0];
				temp[2]=values[1];
				temp[4]=values[2];
				temp[6]=values[3];
				
				stageInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) & (stageSize - 1u);;
				angle = float(stageInvocationID) * stageAngle;
				twiddleFactor = vec2(cos(angle), sin(angle));
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y) + gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y + consts.radixStride[1])+gl_LocalInvocationID.x];
				values[2] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y + 2 * consts.radixStride[1])+gl_LocalInvocationID.x];
				values[3] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y + 3 * consts.radixStride[1])+gl_LocalInvocationID.x];
				
				radix4(values, twiddleFactor);
				
				temp[1]=values[0];
				temp[3]=values[1];
				temp[5]=values[2];
				temp[7]=values[3];
				break;
			}
			case 8:
			{
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);;
				float angle = float(stageInvocationID) * stageAngle;
				vec2 twiddleFactor = vec2(cos(angle), sin(angle));
				vec2 values[8];
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + consts.radixStride[2])+gl_LocalInvocationID.x];
				values[2] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 2 * consts.radixStride[2])+gl_LocalInvocationID.x];
				values[3] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 3 * consts.radixStride[2])+gl_LocalInvocationID.x];
				values[4] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 4 * consts.radixStride[2])+gl_LocalInvocationID.x];
				values[5] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 5 * consts.radixStride[2])+gl_LocalInvocationID.x];
				values[6] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 6 * consts.radixStride[2])+gl_LocalInvocationID.x];
				values[7] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 7 * consts.radixStride[2])+gl_LocalInvocationID.x];
				
				radix8(values, twiddleFactor);
				
				temp[0]=values[0];
				temp[1]=values[1];
				temp[2]=values[2];
				temp[3]=values[3];
				temp[4]=values[4];
				temp[5]=values[5];
				temp[6]=values[6];
				temp[7]=values[7];
				break;
			}
		}
    
        memoryBarrierShared();
        barrier();
		switch(current_radix){
			case 2:
			{
				float stageNormalization = (consts.inverse) ? 0.5 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.y) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[0]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[4]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[1]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[5]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.y+2*gl_WorkGroupSize.y) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.y+2*gl_WorkGroupSize.y) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[2]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[6]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.y+3*gl_WorkGroupSize.y) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.y+3*gl_WorkGroupSize.y) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[3]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[7]*stageNormalization;
				
				stageSize=stageSize*2;
				stageAngle=stageAngle*0.5f;
				break;
			}
			case 4:
			{
				float stageNormalization = (consts.inverse) ? 0.25 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.y) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 4;
				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[0]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[2]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+2*stageSize)+gl_LocalInvocationID.x]=temp[4]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+3*stageSize)+gl_LocalInvocationID.x]=temp[6]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 4;
				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[1]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[3]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+2*stageSize)+gl_LocalInvocationID.x]=temp[5]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+3*stageSize)+gl_LocalInvocationID.x]=temp[7]*stageNormalization;
				
				stageSize=stageSize*4;
				stageAngle=stageAngle*0.25f;
				break;
			}
			case 8:
			{
				float stageNormalization = (consts.inverse) ? 0.125 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.y) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 8;
				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[0]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[1]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+2*stageSize)+gl_LocalInvocationID.x]=temp[2]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+3*stageSize)+gl_LocalInvocationID.x]=temp[3]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+4*stageSize)+gl_LocalInvocationID.x]=temp[4]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+5*stageSize)+gl_LocalInvocationID.x]=temp[5]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+6*stageSize)+gl_LocalInvocationID.x]=temp[6]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+7*stageSize)+gl_LocalInvocationID.x]=temp[7]*stageNormalization;

				stageSize=stageSize*8;
				stageAngle=stageAngle*0.125f;
				break;
			}
		}

        memoryBarrierShared();
        barrier();
	}
	if ((consts.zeropad[0])&&(consts.inverse)){
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+2*gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2*gl_WorkGroupSize.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+3*gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3*gl_WorkGroupSize.y))];
	} else {
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+2*gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2*gl_WorkGroupSize.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+3*gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3*gl_WorkGroupSize.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+4*gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+4*gl_WorkGroupSize.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+5*gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+5*gl_WorkGroupSize.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+6*gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+6*gl_WorkGroupSize.y))];
		outputs[indexOutput(gl_GlobalInvocationID.x, (gl_LocalInvocationID.y+7*gl_WorkGroupSize.y), consts.coordinate)]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+7*gl_WorkGroupSize.y))];

	}
}
