#version 450

const float M_PI = 3.1415926535897932384626433832795;
const float M_SQRT1_2 = 0.70710678118654752440084436210485;

layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in;
layout (constant_id = 4) const uint fft_dim = 2048;

layout(push_constant) uniform PushConsts
{
	bool inverse;
	bool zeropad[2];
	uint inputStride[5];
	uint outputStride[5];
	uint radixStride[3];
	uint numStages;
	uint stageRadix[2];
	uint ratio[2];
	bool ratioDirection[2];
	uint inputOffset;
	uint outputOffset;
	uint coordinate;
	uint batchID;
} consts;

layout(std430, binding = 0) buffer Data {
    vec2 inputs[];
};

layout(std430, binding = 1) buffer Data2 {
    float outputs[];
};

uint indexInput(uint index_x, uint index_y) {
    return consts.inputOffset + index_x * consts.inputStride[0] + index_y * consts.inputStride[1] + gl_GlobalInvocationID.z * consts.inputStride[2] + consts.coordinate * consts.inputStride[3] + consts.batchID * consts.inputStride[4] ;
}
uint indexOutput(uint index) {
    return consts.outputOffset + index * consts.outputStride[0] + 2*gl_GlobalInvocationID.y* consts.outputStride[1] + 2*gl_GlobalInvocationID.z * consts.outputStride[2] + 2*consts.coordinate * consts.outputStride[3]+ 2*consts.batchID * consts.outputStride[4];
}

uint positionShuffle(uint pos, uint ratio, bool ratioDirection ) {

	return (((pos)/(ratio))+((pos)%(ratio))*(fft_dim/4));
		
	/*if (ratioDirection)
		return ((pos >> ratio)+(pos & (1<<ratio - 1))*(fft_dim>>1));
	else
		return (((pos)/(fft_dim>>1))+((pos)%(fft_dim>>1))*(1<<ratio));*/
}

void radix2(inout vec2 values[2], vec2 w) {
    vec2 temp;
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
}

void radix4(inout vec2 values[4],inout vec2 w) {
	
	//DIF 1st stage with double angle
	vec2 temp;
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	//DIF 2nd stage with half angle
	w = normalize(w + vec2(1.0, 0.0));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	w = (consts.inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);

	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp = values[1];
	values[1]=values[2];
	values[2]=temp;
}

void radix8(inout vec2 values[8], inout vec2 w) {
	//DIF 1st stage with quadruple angle
	
	vec2 temp; 
	temp.x=values[4].x*w.x-values[4].y*w.y;
	temp.y=values[4].y*w.x+values[4].x*w.y;
	values[4]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[5].x*w.x-values[5].y*w.y;
	temp.y=values[5].y*w.x+values[5].x*w.y;
	values[5]=values[1]-temp;
	values[1]=values[1]+temp;
	
	temp.x=values[6].x*w.x-values[6].y*w.y;
	temp.y=values[6].y*w.x+values[6].x*w.y;
	values[6]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[3]-temp;
	values[3]=values[3]+temp;
	
	//DIF 2nd stage with double angle
	w = normalize(w + vec2(1.0, 0.0));
	
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	vec2 iw = (consts.inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);
    
	temp.x=values[6].x*iw.x-values[6].y*iw.y;
	temp.y=values[6].y*iw.x+values[6].x*iw.y;
	values[6]=values[4]-temp;
	values[4]=values[4]+temp;
	
	temp.x=values[7].x*iw.x-values[7].y*iw.y;
	temp.y=values[7].y*iw.x+values[7].x*iw.y;
	values[7]=values[5]-temp;
	values[5]=values[5]+temp;
	
	//DIF 3rd stage with angle
	w = normalize(w + vec2(1.0, 0.0));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	iw = (consts.inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);
	
	temp.x=values[3].x*iw.x-values[3].y*iw.y;
	temp.y=values[3].y*iw.x+values[3].x*iw.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	iw.x=(consts.inverse) ? w.x*M_SQRT1_2+w.y*M_SQRT1_2 : w.x*M_SQRT1_2-w.y*M_SQRT1_2;
	iw.y=(consts.inverse) ? w.y*M_SQRT1_2-w.x*M_SQRT1_2 : w.y*M_SQRT1_2+w.x*M_SQRT1_2;
   
	temp.x=values[5].x*iw.x-values[5].y*iw.y;
	temp.y=values[5].y*iw.x+values[5].x*iw.y;
	values[5]=values[4]-temp;
	values[4]=values[4]+temp;
	
	w = (consts.inverse) ? vec2(iw.y, -iw.x) : vec2(-iw.y, iw.x);
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[6]-temp;
	values[6]=values[6]+temp;
	
	temp = values[1];
	values[1]=values[4];
	values[4]=temp;
	
	temp = values[3];
	values[3]=values[6];
	values[6]=temp;

}

const uint max_shared_vec2=4096;
const uint ratio_over_max =  2;//  reg mem/shared mem
const uint tempSize = fft_dim/gl_WorkGroupSize.x;
shared vec2 sdata[max_shared_vec2];// half real half imag

void main() {

	vec2 temp0[8];
	vec2 temp1[8];
	
	//c2r regroup
	if (consts.ratioDirection[0]){
		for (uint i=0; i<8; i++){
			sdata[positionShuffle(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x, consts.ratio[0], consts.ratioDirection[0])]=inputs[indexInput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x, gl_GlobalInvocationID.y)];
		}
		
		memoryBarrierShared();
		barrier();	
		
		if (gl_LocalInvocationID.x>0) {
			for (uint i=0; i<4; i++){	
				temp0[i].x=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].x-sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].y);
				temp0[i].y=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].y+sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].x);
				temp1[i+4].x=(sdata[4*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].x+sdata[8*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].y);
				temp1[i+4].y=(-sdata[4*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].y+sdata[8*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].x);
			}
		} else{
			for (uint i=1; i<4; i++){	
				temp0[i].x=(sdata[i*gl_WorkGroupSize.x-1].x-sdata[(i+4)*gl_WorkGroupSize.x-1].y);
				temp0[i].y=(sdata[i*gl_WorkGroupSize.x-1].y+sdata[(i+4)*gl_WorkGroupSize.x-1].x);

			}
			for (uint i=0; i<4; i++){	
				temp1[i+4].x=(sdata[(4 - i)*gl_WorkGroupSize.x - 1].x+sdata[(8-i)*gl_WorkGroupSize.x - 1].y);
				temp1[i+4].y=(-sdata[(4 - i)*gl_WorkGroupSize.x - 1].y+sdata[(8-i)*gl_WorkGroupSize.x - 1].x);
			}
			temp0[4].x=(sdata[4*gl_WorkGroupSize.x-1].x-sdata[8*gl_WorkGroupSize.x-1].y);
			temp0[4].y=(sdata[4*gl_WorkGroupSize.x-1].y+sdata[8*gl_WorkGroupSize.x-1].x);

			vec2 temp[2];
			if (consts.zeropad[1]){
				temp[0]=inputs[indexInput(2*gl_GlobalInvocationID.y,  gl_WorkGroupSize.y*2*gl_NumWorkGroups.y)];
				temp[1]=inputs[indexInput(2*gl_GlobalInvocationID.y+1,  gl_WorkGroupSize.y*2*gl_NumWorkGroups.y)];
			} else {
				temp[0]=inputs[indexInput(2*gl_GlobalInvocationID.y,  gl_WorkGroupSize.y*gl_NumWorkGroups.y)];
				temp[1]=inputs[indexInput(2*gl_GlobalInvocationID.y+1,  gl_WorkGroupSize.y*gl_NumWorkGroups.y)];
			
			}
			temp0[0].x=(temp[0].x-temp[1].y);
			temp0[0].y=(temp[0].y+temp[1].x);
		}
		memoryBarrierShared();
		barrier();
		for (uint i=0; i<8; i++){
			sdata[positionShuffle(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x, consts.ratio[0], consts.ratioDirection[0])]=inputs[indexInput(gl_LocalInvocationID.x+(i+8)*gl_WorkGroupSize.x, gl_GlobalInvocationID.y)];
		}
		
		memoryBarrierShared();
		barrier();	
		
		if (gl_LocalInvocationID.x>0){ 
			for (uint i=0; i<4; i++){	
				temp0[i+4].x=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].x-sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].y);
				temp0[i+4].y=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].y+sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].x);
				temp1[i].x=(sdata[4*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].x+sdata[8*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].y);
				temp1[i].y=(-sdata[4*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].y+sdata[8*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].x);
			}
		} else{
			for (uint i=1; i<4; i++){	
				temp0[i+4].x=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].x-sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].y);
				temp0[i+4].y=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].y+sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].x);
				temp1[i].x=(sdata[(4 - i)*gl_WorkGroupSize.x - 1].x+sdata[(8-i)*gl_WorkGroupSize.x - 1].y);
				temp1[i].y=(-sdata[(4 - i)*gl_WorkGroupSize.x - 1].y+sdata[(8-i)*gl_WorkGroupSize.x - 1].x);
			}
			temp1[0].x=(sdata[4*gl_WorkGroupSize.x - 1].x+sdata[8*gl_WorkGroupSize.x - 1].y);
			temp1[0].y=(-sdata[4*gl_WorkGroupSize.x - 1].y+sdata[8*gl_WorkGroupSize.x - 1].x);
		}
	}
	else{
		for (uint i=0; i<4; i++){
			sdata[(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=inputs[indexInput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x, gl_GlobalInvocationID.y)];
			sdata[4*gl_WorkGroupSize.x + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=inputs[indexInput(gl_LocalInvocationID.x+(i+8)*gl_WorkGroupSize.x, gl_GlobalInvocationID.y)];
		}
		
		memoryBarrierShared();
		barrier();	
		
		if (gl_LocalInvocationID.x>0) {
			for (uint i=0; i<4; i++){	
				temp0[i].x=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].x-sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].y);
				temp0[i].y=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].y+sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].x);
				temp1[i+4].x=(sdata[4*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].x+sdata[8*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].y);
				temp1[i+4].y=(-sdata[4*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].y+sdata[8*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].x);
			}
		} else{
			for (uint i=1; i<4; i++){	
				temp0[i].x=(sdata[i*gl_WorkGroupSize.x-1].x-sdata[(i+4)*gl_WorkGroupSize.x-1].y);
				temp0[i].y=(sdata[i*gl_WorkGroupSize.x-1].y+sdata[(i+4)*gl_WorkGroupSize.x-1].x);

			}
			for (uint i=0; i<4; i++){	
				temp1[i+4].x=(sdata[(4 - i)*gl_WorkGroupSize.x - 1].x+sdata[(8-i)*gl_WorkGroupSize.x - 1].y);
				temp1[i+4].y=(-sdata[(4 - i)*gl_WorkGroupSize.x - 1].y+sdata[(8-i)*gl_WorkGroupSize.x - 1].x);
			}
			temp0[4].x=(sdata[4*gl_WorkGroupSize.x-1].x-sdata[8*gl_WorkGroupSize.x-1].y);
			temp0[4].y=(sdata[4*gl_WorkGroupSize.x-1].y+sdata[8*gl_WorkGroupSize.x-1].x);

			vec2 temp[2];
			if (consts.zeropad[1]){
				temp[0]=inputs[indexInput(2*gl_GlobalInvocationID.y,  gl_WorkGroupSize.y*2*gl_NumWorkGroups.y)];
				temp[1]=inputs[indexInput(2*gl_GlobalInvocationID.y+1,  gl_WorkGroupSize.y*2*gl_NumWorkGroups.y)];
			} else {
				temp[0]=inputs[indexInput(2*gl_GlobalInvocationID.y,  gl_WorkGroupSize.y*gl_NumWorkGroups.y)];
				temp[1]=inputs[indexInput(2*gl_GlobalInvocationID.y+1,  gl_WorkGroupSize.y*gl_NumWorkGroups.y)];
			
			}
			temp0[0].x=(temp[0].x-temp[1].y);
			temp0[0].y=(temp[0].y+temp[1].x);
		}
		memoryBarrierShared();
		barrier();
		for (uint i=0; i<4; i++){
			sdata[(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=inputs[indexInput(gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x, gl_GlobalInvocationID.y)];
			sdata[4*gl_WorkGroupSize.x + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=inputs[indexInput(gl_LocalInvocationID.x+(i+12)*gl_WorkGroupSize.x, gl_GlobalInvocationID.y)];
		}
		
		memoryBarrierShared();
		barrier();	
		
		if (gl_LocalInvocationID.x>0){ 
			for (uint i=0; i<4; i++){	
				temp0[i+4].x=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].x-sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].y);
				temp0[i+4].y=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].y+sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].x);
				temp1[i].x=(sdata[4*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].x+sdata[8*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].y);
				temp1[i].y=(-sdata[4*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].y+sdata[8*gl_WorkGroupSize.x - (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) - 1].x);
			}
		} else{
			for (uint i=1; i<4; i++){	
				temp0[i+4].x=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].x-sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].y);
				temp0[i+4].y=(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1].y+sdata[gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1].x);
				temp1[i].x=(sdata[(4 - i)*gl_WorkGroupSize.x - 1].x+sdata[(8-i)*gl_WorkGroupSize.x - 1].y);
				temp1[i].y=(-sdata[(4 - i)*gl_WorkGroupSize.x - 1].y+sdata[(8-i)*gl_WorkGroupSize.x - 1].x);
			}
			temp1[0].x=(sdata[4*gl_WorkGroupSize.x - 1].x+sdata[8*gl_WorkGroupSize.x - 1].y);
			temp1[0].y=(-sdata[4*gl_WorkGroupSize.x - 1].y+sdata[8*gl_WorkGroupSize.x - 1].x);
		}
	}
	
	
    memoryBarrierShared();
    barrier();
	
    uint stageSize=1;
    float stageAngle=(consts.inverse) ? -M_PI : M_PI;
	
	for (uint n=0; n < consts.numStages-1; n++){//all stages but last are radix-8
		{
			vec2 sort0[8];
			for(uint j = 0; j < 4; ++j){
				sort0[j]=temp0[1+2*j];
				sort0[j+4]=temp1[1+2*j];}
			
			for(uint j = 0; j < 4; ++j)
				temp0[j]=temp0[2*j];
			
			for(uint j = 0; j < 4; ++j)
				temp0[j+4]=temp1[2*j];
			
			for (uint j=0; j<8; j++)
				temp1[j]=sort0[j];

		}
		{
			uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
			float angle = stageInvocationID * stageAngle;
			vec2 twiddleFactor = vec2(cos(angle), sin(angle));

			radix8(temp0, twiddleFactor);


		}
		{

			uint stageInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) & (stageSize - 1u);
			float angle = stageInvocationID * stageAngle;
			vec2 twiddleFactor = vec2(cos(angle), sin(angle));

			radix8(temp1, twiddleFactor);


		}
        memoryBarrierShared();
        barrier();
		
		//all stages but last have no shifts larger than shared memory size - no need for swap buffer. Need to serialize thread groups in ratio_over_max amount of batches and exchange data
		{
			float stageNormalization = (consts.inverse) ? 0.125 : 1.0;
			uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
			uint blockInvocationID = (gl_LocalInvocationID.x) - stageInvocationID;
			uint outputIndex = stageInvocationID + blockInvocationID * 8;
			for(uint j = 0; j < 8; ++j){	
				sdata[outputIndex+stageSize*j]=temp0[j]*stageNormalization;
			}
			memoryBarrierShared();
			barrier();
			
			for (uint j=0; j<8; j++){
				temp0[j] = sdata[(gl_LocalInvocationID.x)+gl_WorkGroupSize.x*j];			
			}
			
			memoryBarrierShared();
			barrier();

			for(uint j = 0; j < 8; ++j){	
				sdata[outputIndex+stageSize*j]=temp1[j]*stageNormalization;
			}
			memoryBarrierShared();
			barrier();
			
			for (uint j=0; j<8; j++){
				temp1[j] = sdata[(gl_LocalInvocationID.x)+gl_WorkGroupSize.x*j];			
			}
			
			memoryBarrierShared();
			barrier();
			
		}
		
		stageSize=stageSize*8;
		stageAngle=stageAngle*0.125f;
    }
	
	
	//last stage - arbitrary radix
	//stageSize=4096;
	{
		vec2 sort0[8];
		for (uint t=0; t<4; t++){
			sort0[t*2]=temp0[t];
			sort0[t*2+1]=temp1[t];
		}
		for (uint t=0; t<4; t++){
			temp0[t]=sort0[t];
			temp1[t]=sort0[t+4];
		}
		for (uint t=0; t<4; t++){
			sort0[t*2]=temp0[t+4];
			sort0[t*2+1]=temp1[t+4];
		}
		for (uint t=0; t<4; t++)
			temp0[t+4]=temp1[t];
		
		for (uint t=0; t<8; t++)
			temp1[t]=sort0[t];

	}
	
	
	for (uint i=0; i<4; i++){
		uint stageInvocationID = (gl_LocalInvocationID.x + i*gl_WorkGroupSize.x ) & (stageSize - 1u);
		float angle = stageInvocationID * stageAngle;
		vec2 twiddleFactor = vec2(cos(angle), sin(angle));
		
		vec2 values[2];
		for(uint j = 0; j < 2; ++j){
			values[j] = temp0[i*2+j];
		}
		radix2(values, twiddleFactor);
		for(uint j = 0; j < 2; ++j){
			temp0[i*2+j]=values[j];
		}

	}
	for (uint i=0; i<4; i++){
		uint stageInvocationID = (gl_LocalInvocationID.x + (i+4)*gl_WorkGroupSize.x ) & (stageSize - 1u);
		float angle = stageInvocationID * stageAngle;
		vec2 twiddleFactor = vec2(cos(angle), sin(angle));
		vec2 values[2];
		for(uint j = 0; j < 2; ++j){
			values[j] = temp1[i*2+j];
		}
		radix2(values, twiddleFactor);
		for(uint j = 0; j < 2; ++j){
			temp1[i*2+j]=values[j];
		}

	}
	{
		vec2 sort0[8];
		for (uint t=0; t<4; t++){
			sort0[t]=temp0[t*2+1];
			sort0[t+4]=temp1[t*2+1];
		}
		for (uint t=0; t<4; t++)
			temp0[t]=temp0[t*2];
		
		for (uint t=0; t<4; t++)
			temp0[t+4]=temp1[t*2];
		
		for (uint t=0; t<8; t++)
			temp1[t]=sort0[t];
		
	}
	
	memoryBarrierShared();
	barrier();
	
	if (consts.zeropad[0]){
		float stageNormalization = (consts.inverse) ? 0.5 : 1.0;
		for (uint i=0; i<8; i++){
			sdata[gl_LocalInvocationID.x + i*gl_WorkGroupSize.x]=temp0[i]*stageNormalization;
		}

		memoryBarrierShared();
		barrier();

		for (uint i=0; i<8; i++){
			outputs[indexOutput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=sdata[(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x;
			outputs[indexOutput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)+ consts.outputStride[1]]=sdata[(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y;
		}
		memoryBarrierShared();
		barrier();
	}
	else{

		float stageNormalization = (consts.inverse) ? 0.5 : 1.0;
			
		for (uint i=0; i<8; i++){
			sdata[gl_LocalInvocationID.x + i*gl_WorkGroupSize.x]=temp0[i]*stageNormalization;
		}

		memoryBarrierShared();
		barrier();

		for (uint i=0; i<8; i++){
			outputs[indexOutput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=sdata[(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x;
			outputs[indexOutput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)+ consts.outputStride[1]]=sdata[(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y;
		}
		memoryBarrierShared();
		barrier();
		
		for (uint i=0; i<8; i++){
			sdata[gl_LocalInvocationID.x + i*gl_WorkGroupSize.x]=temp1[i]*stageNormalization;
		}

		memoryBarrierShared();
		barrier();

		for (uint i=0; i<8; i++){
			outputs[indexOutput(gl_LocalInvocationID.x+(i+8)*gl_WorkGroupSize.x)]=sdata[(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x;
			outputs[indexOutput(gl_LocalInvocationID.x+(i+8)*gl_WorkGroupSize.x)+ consts.outputStride[1]]=sdata[(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y;
		}
		memoryBarrierShared();
		barrier();
	}
	
}
