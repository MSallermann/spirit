#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(std430, binding = 0) readonly buffer Input
{
   float inputs[];
};

layout(std430, binding = 1) writeonly buffer PartialSums
{
   float partial_sums[];
};

layout (local_size_x_id = 1) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;

layout(push_constant) uniform PushConsts
{
  uint n;
} consts;

shared float sdata[3*sumSubGroupSize];

void main()
{
    float sum_x = 0.0;
    float sum_y = 0.0;
    float sum_z = 0.0;
    if (gl_GlobalInvocationID.x < consts.n)
    {
        sum_x = inputs[3*gl_GlobalInvocationID.x];
        sum_y = inputs[3*gl_GlobalInvocationID.x+1];
        sum_z = inputs[3*gl_GlobalInvocationID.x+2];
    }

    sum_x = subgroupInclusiveAdd(sum_x);
    sum_y = subgroupInclusiveAdd(sum_y);
    sum_z = subgroupInclusiveAdd(sum_z);

    if (gl_SubgroupInvocationID == gl_SubgroupSize - 1)
    {
        sdata[3*gl_SubgroupID] = sum_x;
        sdata[3*gl_SubgroupID+1] = sum_y;
        sdata[3*gl_SubgroupID+2] = sum_z;
    }

    memoryBarrierShared();
    barrier();

    if (gl_SubgroupID == 0)
    {
        float warpSum_x = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[3*gl_SubgroupInvocationID] : 0;
        float warpSum_y = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[3*gl_SubgroupInvocationID+1] : 0;
        float warpSum_z = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[3*gl_SubgroupInvocationID+2] : 0;
        warpSum_x = subgroupInclusiveAdd(warpSum_x);
        warpSum_y = subgroupInclusiveAdd(warpSum_y);
        warpSum_z = subgroupInclusiveAdd(warpSum_z);
        sdata[3*gl_SubgroupInvocationID] = warpSum_x;
        sdata[3*gl_SubgroupInvocationID+1] = warpSum_y;
        sdata[3*gl_SubgroupInvocationID+2] = warpSum_z;
    }

    memoryBarrierShared();
    barrier();

    float blockSum_x = 0;
    float blockSum_y = 0;
    float blockSum_z = 0;
    if (gl_SubgroupID > 0)
    {
        blockSum_x = sdata[3*gl_SubgroupID - 3];
        blockSum_y = sdata[3*gl_SubgroupID - 2];
        blockSum_z = sdata[3*gl_SubgroupID - 1];
    }

    sum_x += blockSum_x;
    sum_y += blockSum_y;
    sum_z += blockSum_z;

    if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1)
    {
        partial_sums[3*gl_WorkGroupID.x] = sum_x;
        partial_sums[3*gl_WorkGroupID.x+1] = sum_y;
        partial_sums[3*gl_WorkGroupID.x+2] = sum_z;
    }
}
