#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_ARB_gpu_shader_fp64 : enable

double sina_11(double x)
{
    //minimax coefs for sin for 0..pi/2 range
    const double a3 = -1.666666660646699151540776973346659104119e-1LF;
    const double a5 =  8.333330495671426021718370503012583606364e-3LF;
    const double a7 = -1.984080403919620610590106573736892971297e-4LF;
    const double a9 =  2.752261885409148183683678902130857814965e-6LF;
    const double ab = -2.384669400943475552559273983214582409441e-8LF;

    const double m_2_pi = 0.636619772367581343076LF;
    const double m_pi_2 = 1.57079632679489661923LF;

    double y = abs(x * m_2_pi);
    double q = floor(y);
    int quadrant = int(q);

    double t = (quadrant & 1) != 0 ? 1 - y + q : y - q;
    t *= m_pi_2;

    double t2 = t * t;
    double r = fma(fma(fma(fma(fma(ab, t2, a9), t2, a7), t2, a5), t2, a3),
        t2*t, t);

    r = x < 0 ? -r : r;

    return (quadrant & 2) != 0 ? -r : r;
}
double cosa_11(double x)
{
    //sin(x + PI/2) = cos(x)
    return sina_11(x + 1.57079632679489661923LF);
}
layout (local_size_x_id = 1) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;

layout(binding = 0) buffer Data
{
   float s [];
};
layout(binding = 1) buffer Data0
{
   float sd [];
};
layout(binding = 2) buffer local_iteration
{
   uint iteration []; // 0-local_iter;
};
layout(binding = 3) readonly buffer Data1
{
   float reduceResults[];
};
layout(std430, binding = 4) writeonly buffer PartialMax
{
   float partial_max[];
};
layout(binding = 5) buffer MaxMove
{
   float maxmove [];
};
layout(binding = 6) buffer Data2
{
   float s_copy [];
};
layout(push_constant) uniform PushConsts
{
  uint num_mem;
  uint nos;
  uint pad;
  float eps;
  uint k;
  float max_move;
} consts;

shared float sdata[sumSubGroupSize];
void main() {

	double theta_rms=sqrt(reduceResults[0]/consts.nos);
	double scaling = (theta_rms>maxmove[1]) ? maxmove[1]/theta_rms : 1.0;
	uint id_x=gl_GlobalInvocationID.x;
	s_copy[id_x]=s[id_x];
	s_copy[id_x+consts.pad]=s[id_x+consts.pad];
	s_copy[id_x+2*consts.pad]=s[id_x+2*consts.pad];
	double sd_loc[3];
	sd_loc[0]=sd[id_x]*scaling;
	sd_loc[1]=sd[id_x+consts.pad]*scaling;
	sd_loc[2]=sd[id_x+2*consts.pad]*scaling;
	sd[id_x]=float(sd_loc[0]);
	sd[id_x+consts.pad]=float(sd_loc[1]);
	sd[id_x+2*consts.pad]=float(sd_loc[2]);
	//float temp_x=0;
	//float temp_y=0;
	//float temp_z=0;
	double theta = sqrt(sd_loc[0]*sd_loc[0]+sd_loc[1]*sd_loc[1]+sd_loc[2]*sd_loc[2]);
	//float s_norm=1.0;
	if (theta > 1.0e-20) // if theta is too small we do nothing
	{
		double theta_inv = 1.0/theta;
		double q = cosa_11(theta);
		double w = 1 - q;
		double x = -sd_loc[0]* theta_inv;
		double y = -sd_loc[1]* theta_inv;
		double z = -sd_loc[2]* theta_inv;
		double s1 = -y * z * w;
		double s2 = x * z * w;
		double s3 = -x * y * w;
		double sin_theta= sina_11(theta);
		double p1 = x * sin_theta;
		double p2 = y * sin_theta;
		double p3 = z * sin_theta;
		double t1, t2, t3;
		t1 = (q + z * z * w) * s[id_x] + (s1 + p1) * s[id_x+consts.pad] + (s2 + p2) * s[id_x+2*consts.pad];
		t2 = (s1 - p1) * s[id_x] + (q + y * y * w) * s[id_x+consts.pad] + (s3 + p3) * s[id_x+2*consts.pad];
		t3 = (s2 - p2) * s[id_x] + (s3 - p3) * s[id_x+consts.pad] + (q + x * x * w) * s[id_x+2*consts.pad];
		//temp_x=s[id_x]-float(t1);
		//temp_y=s[id_x+consts.pad]-float(t2);
		//temp_z=s[id_x+2*consts.pad]-float(t3);
		//s_norm=float(t1*t1+t2*t2+t3*t3);
		s[id_x] =float(t1);//scaling;//sd[id_x];//t1;
		s[id_x+consts.pad] = float(t2);//iteration[gl_WorkGroupID.x];//sd[id_x+consts.pad];// t2;
		s[id_x+2*consts.pad] =float(t3);//sd[id_x+consts.pad*2];//t3;
	};
	/*
	float max = (temp_x*temp_x+temp_y*temp_y+temp_z*temp_z);
	
	max = subgroupInclusiveMax(max);

	if (gl_SubgroupInvocationID == gl_SubgroupSize - 1)
	{
		sdata[gl_SubgroupID] = max;
	}

	memoryBarrierShared();
	barrier();

	if (gl_SubgroupID == 0)
	{
		float warpMax = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID] : 0;
		warpMax = subgroupInclusiveMax(warpMax);
		if (gl_SubgroupInvocationID == 0)
		{
			partial_max[gl_WorkGroupID.x] = warpMax;
		}
	}
	barrier();*/
	if (gl_LocalInvocationID.x==gl_WorkGroupSize.x-1)
	{
		iteration[gl_WorkGroupID.x]=iteration[gl_WorkGroupID.x]+1;
		iteration[gl_WorkGroupID.x+gl_NumWorkGroups.x]=iteration[gl_WorkGroupID.x+gl_NumWorkGroups.x]+1;
		iteration[gl_WorkGroupID.x+2*gl_NumWorkGroups.x]=iteration[gl_WorkGroupID.x+2*gl_NumWorkGroups.x]+1;
	}

}