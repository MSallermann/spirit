#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (local_size_x_id = 1) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;

layout(binding = 0) buffer Data0
{
   float s [];
};
layout(binding = 1) buffer Data1
{
   float s_copy [];
};
layout(binding = 2) buffer Data2
{
   float grad [];
};
layout(binding = 3) buffer Data3
{
   float grad_copy [];
};
layout(std430, binding = 4) buffer PartialMax
{
   float partial_max[];
};
layout(binding = 5) buffer Torque
{
   float gamma_dt_from_torque [];
};
layout(push_constant) uniform PushConsts
{
  float dt;
  uint pad;
} consts;
shared float sdata[sumSubGroupSize];

void main() {

	uint id_x=gl_GlobalInvocationID.x;
	vec3 grad_corr;
	grad_corr.x=0.5*(grad[id_x]+grad_copy[id_x]);
	grad_corr.y=0.5*(grad[id_x+consts.pad]+grad_copy[id_x+consts.pad]);
	grad_corr.z=0.5*(grad[id_x+2*consts.pad]+grad_copy[id_x+2*consts.pad]);
	float grad_norm = length(grad_corr);
	float gamma_dt= (consts.dt==0) ? 1e-4/gamma_dt_from_torque[0] : consts.dt; 
	
	float max=0;
	if (grad_norm > 1.0e-20) // if q is too small we do nothing
	{
		float grad_norm_inv=1.0/grad_norm;
		float q = cos(grad_norm*gamma_dt);
		float w = 1 - q;
		float x = -grad_corr.x* grad_norm_inv;
		float y = -grad_corr.y* grad_norm_inv;
		float z = -grad_corr.z* grad_norm_inv;
		float s1 = x * y * w;
		float s2 = x * z * w;
		float s3 = z * y * w;
		float sin_grad= sin(grad_norm*gamma_dt);
		float p1 = z * sin_grad;
		float p2 = y * sin_grad;
		float p3 = x * sin_grad;
		vec3 t;
	
		t.x = (q + x* x * w) * s_copy[id_x] + (s1 - p1) * s_copy[id_x+consts.pad] + (s2 + p2) * s_copy[id_x+2*consts.pad];
		t.y = (s1 + p1) * s_copy[id_x] + (q + y * y * w) * s_copy[id_x+consts.pad] + (s3 - p3) * s_copy[id_x+2*consts.pad];
		t.z = (s2 - p2) * s_copy[id_x] + (s3 + p3) * s_copy[id_x+consts.pad] + (q + z * z * w) * s_copy[id_x+2*consts.pad];
		t=normalize(t);
		s[id_x] =  t.x;
		s[id_x+consts.pad] = t.y;
		s[id_x+2*consts.pad] = t.z;
		
		/*float temp_x=grad[id_x]-grad_copy[id_x];
		float temp_y=grad[id_x+consts.pad]-grad_copy[id_x+consts.pad];
		float temp_z=grad[id_x+2*consts.pad]-grad_copy[id_x+2*consts.pad];*/
		
		//float max = temp_x*temp_x+temp_y*temp_y+temp_z*temp_z;
		max = grad_norm;//sqrt(temp_x*temp_x+temp_y*temp_y+temp_z*temp_z);
	};
	
	max = subgroupInclusiveMax(max);

	if (gl_SubgroupInvocationID == gl_SubgroupSize - 1)
	{
		sdata[gl_SubgroupID] = max;
	}

	memoryBarrierShared();
	barrier();

	if (gl_SubgroupID == 0)
	{
		float warpMax = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID] : 0;
		warpMax = subgroupInclusiveMax(warpMax);
		if (gl_SubgroupInvocationID == 0)
		{
			partial_max[gl_WorkGroupID.x] = warpMax;
			 
		}
	}
	if (gl_GlobalInvocationID.x==0)
		gamma_dt_from_torque[1]+=gamma_dt/0.176085964411;
}