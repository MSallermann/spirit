#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (local_size_x_id = 1) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;

layout(binding = 0) buffer Data0
{
   float s [];
};
layout(binding = 1) buffer Data1
{
   float s_copy [];
};
layout(binding = 2) buffer Data2
{
   float grad [];
};
layout(binding = 3) buffer Data3
{
   float grad_copy [];
};
layout(binding = 4) buffer Torque
{
   float gamma_dt_from_torque [];
};
layout(push_constant) uniform PushConsts
{
  
  float dt;
  uint pad;
} consts;
shared float sdata[sumSubGroupSize];

void main() {

	uint id_x=gl_GlobalInvocationID.x;
	
	float gamma_dt= (consts.dt==0) ? 1e-4/gamma_dt_from_torque[0] : consts.dt; 
	s_copy[id_x]=s[id_x];
	s_copy[id_x+consts.pad]=s[id_x+consts.pad];
	s_copy[id_x+2*consts.pad]=s[id_x+2*consts.pad];
	grad_copy[id_x]=grad[id_x];
	grad_copy[id_x+consts.pad]=grad[id_x+consts.pad];
	grad_copy[id_x+2*consts.pad]=grad[id_x+2*consts.pad];
	float grad_norm = sqrt(grad[id_x]*grad[id_x]+grad[id_x+consts.pad]*grad[id_x+consts.pad]+grad[id_x+2*consts.pad]*grad[id_x+2*consts.pad]);
	if (grad_norm > 1.0e-20) // if q is too small we do nothing
	{
		float grad_norm_inv=1.0/grad_norm;
		float q = cos(grad_norm*gamma_dt);
		float w = 1 - q;
		float x = -grad[id_x]* grad_norm_inv;
		float y = -grad[id_x+consts.pad]* grad_norm_inv;
		float z = -grad[id_x+2*consts.pad]* grad_norm_inv;
		float s1 = x * y * w;
		float s2 = x * z * w;
		float s3 = z * y * w;
		float p1 = z * sin(grad_norm*gamma_dt);
		float p2 = y * sin(grad_norm*gamma_dt);
		float p3 = x * sin(grad_norm*gamma_dt);
		float t1, t2, t3;
	
		t1 = (q + x* x * w) * s[id_x] + (s1 - p1) * s[id_x+consts.pad] + (s2 + p2) * s[id_x+2*consts.pad];
		t2 = (s1 + p1) * s[id_x] + (q + y * y * w) * s[id_x+consts.pad] + (s3 - p3) * s[id_x+2*consts.pad];
		t3 = (s2 - p2) * s[id_x] + (s3 + p3) * s[id_x+consts.pad] + (q + z * z * w) * s[id_x+2*consts.pad];
		s[id_x] =  t1;
		s[id_x+consts.pad] = t2;
		s[id_x+2*consts.pad] = t3;
	};
}