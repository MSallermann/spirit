#version 450
#extension GL_ARB_gpu_shader_fp64 : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

double sina_11(double x)
{
    //minimax coefs for sin for 0..pi/2 range
    const double a3 = -1.666666660646699151540776973346659104119e-1LF;
    const double a5 =  8.333330495671426021718370503012583606364e-3LF;
    const double a7 = -1.984080403919620610590106573736892971297e-4LF;
    const double a9 =  2.752261885409148183683678902130857814965e-6LF;
    const double ab = -2.384669400943475552559273983214582409441e-8LF;

    const double m_2_pi = 0.636619772367581343076LF;
    const double m_pi_2 = 1.57079632679489661923LF;

    double y = abs(x * m_2_pi);
    double q = floor(y);
    int quadrant = int(q);

    double t = (quadrant & 1) != 0 ? 1 - y + q : y - q;
    t *= m_pi_2;

    double t2 = t * t;
    double r = fma(fma(fma(fma(fma(ab, t2, a9), t2, a7), t2, a5), t2, a3),
        t2*t, t);

    r = x < 0 ? -r : r;

    return (quadrant & 2) != 0 ? -r : r;
}
double cosa_11(double x)
{
    //sin(x + PI/2) = cos(x)
    return sina_11(x + 1.57079632679489661923LF);
}
layout (local_size_x = 1024, local_size_y = 1,local_size_z = 1) in;
layout (constant_id = 1) const int sumSubGroupSize = 64;
layout(binding = 0) readonly buffer Data0
{
   float grad [];
};
layout(binding = 1) buffer Data2
{
   float sd [];
};
layout(binding = 2) buffer Data3
{
   float s [];
};

layout(binding = 3) buffer Data4
{
   float reduceResults[];
};

layout(push_constant) uniform PushConsts
{
  uint pad;
  float dt;

} consts;

void main() {
	uint id_x=gl_GlobalInvocationID.x;

	vec3 s_loc;
	s_loc.x=s[id_x];
	s_loc.y=s[id_x+consts.pad];
	s_loc.z=s[id_x+2*consts.pad];

	dvec3 sd_loc;
	if (reduceResults[1]==0){
		reduceResults[1]=reduceResults[0];
		sd_loc.x=-grad[id_x];
		sd_loc.y=-grad[id_x+consts.pad];
		sd_loc.z=-grad[id_x+2*consts.pad];	
	}
	else{
		double beta= reduceResults[0]/reduceResults[1];
		reduceResults[1]=reduceResults[0];
		sd_loc.x=beta*sd_loc.x-grad[id_x];
		sd_loc.y=beta*sd_loc.y-grad[id_x+consts.pad];
		sd_loc.z=beta*sd_loc.z-grad[id_x+2*consts.pad];	
	}
	sd_loc*=consts.dt;
	sd[id_x]=float(sd_loc.x);
	sd[id_x+consts.pad]=float(sd_loc.y);
	sd[id_x+2*consts.pad]=float(sd_loc.z);
	double theta = length(sd_loc);
	if (theta > 1.0e-20) // if theta is too small we do nothing
	{
		double theta_inv = 1.0/theta;
		double q = cosa_11(theta);
		double w = 1 - q;
		double x = -sd_loc.x* theta_inv;
		double y = -sd_loc.y* theta_inv;
		double z = -sd_loc.z* theta_inv;
		  
		double s1 = x * z * w;
		double s2 = x * z * w;
		double s3 = z * y * w;
		double sin_theta = sina_11(theta);
		double p1 = z * sin_theta;
		double p2 = y * sin_theta;
		double p3 = x * sin_theta;
		dvec3 t;
	
		t.x = (q + x* x * w) * s_loc.x + (s1 - p1) * s_loc.y + (s2 + p2) * s_loc.z;
		t.y = (s1 + p1) * s_loc.x + (q + y * y * w) * s_loc.y + (s3 - p3) * s_loc.z;
		t.z = (s2 - p2) * s_loc.x + (s3 + p3) * s_loc.y + (q + z * z * w) * s_loc.z;
		t=normalize(t);
		s[id_x] = float(t.x);
		s[id_x+consts.pad] = float(t.y);
		s[id_x+2*consts.pad] = float(t.z);
	};
}	
