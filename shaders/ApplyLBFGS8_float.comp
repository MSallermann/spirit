#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (local_size_x_id = 1) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;

layout(binding = 0) buffer Data
{
   float s [];
};
layout(binding = 1) buffer Data0
{
   float sd [];
};
layout(binding = 2) buffer local_iteration
{
   uint iteration []; // 0-local_iter;
};
layout(binding = 3) readonly buffer Data1
{
   float reduceResults[];
};

layout(binding = 4) buffer MaxMove
{
   float maxmove [];
};
layout(binding = 5) buffer Data2
{
   float s_copy [];
};

layout(push_constant) uniform PushConsts
{
  uint num_mem;
  uint nos;
  uint pad;
  float eps;
  uint k;
  float max_move;
} consts;
//shared float sdata[sumSubGroupSize];

void main() {

	float theta_rms=sqrt(reduceResults[0]/consts.nos);
	float scaling = (theta_rms>maxmove[1]) ? maxmove[1]/theta_rms : 1.0;
	uint id_x=gl_GlobalInvocationID.x;
	vec3 s_loc;
	s_loc.x=s[id_x];
	s_loc.y=s[id_x+consts.pad];
	s_loc.z=s[id_x+2*consts.pad];
	s_copy[id_x]=s_loc.x;
	s_copy[id_x+consts.pad]=s_loc.y;
	s_copy[id_x+2*consts.pad]=s_loc.z;
	vec3 sd_loc;
	sd_loc.x=sd[id_x];
	sd_loc.y=sd[id_x+consts.pad];
	sd_loc.z=sd[id_x+2*consts.pad];
	sd_loc*=scaling;
	//sd[id_x]=sd_loc.x;
	//sd[id_x+consts.pad]=sd_loc.y;
	//sd[id_x+2*consts.pad]=sd_loc.z;

	float theta = length(sd_loc);
	if (theta > 1.0e-20) // if theta is too small we do nothing
	{
		float theta_inv = 1.0/theta;
		float q = cos(theta);
		float w = 1 - q;
		float x = -sd_loc.x* theta_inv;
		float y = -sd_loc.y* theta_inv;
		float z = -sd_loc.z* theta_inv;
		float s1 = x * y * w;
		float s2 = x * z * w;
		float s3 = z * y * w;
		float sin_theta=sin(theta);
		float p1 = z * sin_theta;
		float p2 = y * sin_theta;
		float p3 = x * sin_theta;
		vec3 t;
	
		t.x = (q + x* x * w) * s_loc.x + (s1 - p1) * s_loc.y + (s2 + p2) * s_loc.z;
		t.y = (s1 + p1) * s_loc.x + (q + y * y * w) * s_loc.y + (s3 - p3) * s_loc.z;
		t.z = (s2 - p2) * s_loc.x + (s3 + p3) * s_loc.y + (q + z * z * w) * s_loc.z;
		t=normalize(t);
		s[id_x] = t.x;
		s[id_x+consts.pad] = t.y;
		s[id_x+2*consts.pad] = t.z;
	};
	
	if (gl_LocalInvocationID.x==gl_WorkGroupSize.x-1)
	{
		iteration[gl_WorkGroupID.x]=iteration[gl_WorkGroupID.x]+1;
		iteration[gl_WorkGroupID.x+gl_NumWorkGroups.x]=iteration[gl_WorkGroupID.x+gl_NumWorkGroups.x]+1;
		iteration[gl_WorkGroupID.x+2*gl_NumWorkGroups.x]=iteration[gl_WorkGroupID.x+2*gl_NumWorkGroups.x]+1;
	}

}