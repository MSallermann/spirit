#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
const float M_PI = radians(180); // #define M_PI 3.14159265358979323846
const float M_SQRT1_2 = 1.0 / sqrt(2.0); // #define M_SQRT1_2 0.707106781186547524401
const float mult=1e-7;
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Region{
  float Ms;
  float Ms_inv;
  float minMs;
  float minMs_inv;
  float Aexch;
  float Dmi;
  float external_field_magnitude;
  float external_field_normal[3];
  int n_anisotropies;
  float anisotropy_magnitudes[2];
  float anisotropy_normals[2*3];
  float cell_sizes[3];
  float cell_sizes_inv[3];
};

layout(binding = 0) readonly buffer Spins_Buf
{
   float spins[];
};

layout(binding = 1) buffer Gradient_Buf
{
   float gradient[];
};
layout(binding = 2) readonly buffer Regions_Book
{
   Region regions_book[];
};
layout(binding = 3) readonly buffer Regions_Buf
{
   int regions[];
};

layout(binding = 4) uniform UBO {
    uint WIDTH;
    uint HEIGHT;
    uint DEPTH;
    uint n;
    uint npad;
	uint npad2;
};

//layout (constant_id = 0) const int FORCE_TYPE = 0;

void main() {  
	//return;
	//if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT || gl_GlobalInvocationID.z >= DEPTH)
	//  return;
	uint pad= WIDTH*HEIGHT;
	uint x = gl_GlobalInvocationID.x;
	uint xl = (x==0) ? x : x-1;
	uint xr = (x==WIDTH-1) ? x : x+1;
	uint y = gl_GlobalInvocationID.y;
	uint yl = (y==0) ? y : y-1;
	uint yr = (y==HEIGHT-1) ? y : y+1;
	uint z = gl_GlobalInvocationID.z;
	uint zl = (z==0) ? z : z-1;
	uint zr = (z==DEPTH-1) ? z : z+1;

	uint icell=x+y*WIDTH+3*z*WIDTH*HEIGHT;
	uint icell_nonpad=x+y*WIDTH+z*WIDTH*HEIGHT;
	if (regions_book[regions[icell_nonpad]].Ms==0){
		gradient[icell]=0;
		gradient[icell+pad]=0;
		gradient[icell+2*pad]=0;
		return;
	}
	//DDI leftovers
	gradient[icell]=0;//-mult*regions_book[regions[icell_nonpad]].Ms*gradient[icell];
	gradient[icell+pad]=0;//-mult*regions_book[regions[icell_nonpad]].Ms*gradient[icell+pad];
	gradient[icell+2*pad]=0;//-mult*regions_book[regions[icell_nonpad]].Ms*gradient[icell+2*pad];
	//Zeeman
	float m0 = (4 * 3.14159265358979)*1e-7;
	gradient[icell] -= m0*regions_book[regions[icell_nonpad]].Ms * regions_book[regions[icell_nonpad]].external_field_magnitude*regions_book[regions[icell_nonpad]].external_field_normal[0];
	gradient[icell+pad] -= m0*regions_book[regions[icell_nonpad]].Ms * regions_book[regions[icell_nonpad]].external_field_magnitude*regions_book[regions[icell_nonpad]].external_field_normal[1];
	gradient[icell+2*pad] -= m0*regions_book[regions[icell_nonpad]].Ms * regions_book[regions[icell_nonpad]].external_field_magnitude*regions_book[regions[icell_nonpad]].external_field_normal[2];
	/*
	//Zeeman - Custom field 
	if ((x-WIDTH*0.5f)*(x-WIDTH*0.5f)+(y-HEIGHT*0.5f)*(y-HEIGHT*0.5f) > 0.2*WIDTH*HEIGHT){
	  float norm[3];
	  norm[2]=0;
	  if (x-WIDTH*0.5f==0) { 
		if (y-HEIGHT*0.5f>0) { 
			norm[0]=-1; 
			norm[1]=0;
		} else {
			norm[0]=1; 
			norm[1]=0;
		}
	  } 
	  else {
		if (y-HEIGHT*0.5f==0) { 
			if (x-WIDTH*0.5f>0) { 
			norm[0]=0; 
			norm[1]=1;
			} else {
			norm[0]=0; 
			norm[1]=-1;
			}
		} else {
			if (y-HEIGHT*0.5f>0) { 
				norm[0]=-1; 
				norm[1]=(x-WIDTH*0.5f)/(y-HEIGHT*0.5f);
				norm[0]=norm[0]/sqrt(norm[0]*norm[0]+norm[1]*norm[1]);
				norm[1]=norm[1]/sqrt(norm[0]*norm[0]+norm[1]*norm[1]);}
			else{
				norm[0]=1; 
				norm[1]=-(x-WIDTH*0.5f)/(y-HEIGHT*0.5f);
				norm[0]=norm[0]/sqrt(norm[0]*norm[0]+norm[1]*norm[1]);
				norm[1]=norm[1]/sqrt(norm[0]*norm[0]+norm[1]*norm[1]);
			}
		}
	  }
	  
	  gradient[icell] -= m0*regions_book[regions[icell_nonpad]].Ms * 1e2*norm[0];
	  gradient[icell+pad] -= m0*regions_book[regions[icell_nonpad]].Ms * 1e2*norm[1];
	  //gradient[icell+2*pad] -= m0*regions_book[regions[icell_nonpad]].Ms * regions_book[regions[icell_nonpad]].external_field_magnitude*regions_book[regions[icell_nonpad]].external_field_normal[2];
	}*/
	//Anisotropy
	float prefactor=0;
	for (int i = 0; i < regions_book[regions[icell_nonpad]].n_anisotropies; i++)
	{
		prefactor = 2.0 * regions_book[regions[icell_nonpad]].anisotropy_magnitudes[i] * regions_book[regions[icell_nonpad]].Ms_inv * (regions_book[regions[icell_nonpad]].anisotropy_normals[i*regions_book[regions[icell_nonpad]].n_anisotropies]*spins[icell]+regions_book[regions[icell_nonpad]].anisotropy_normals[i*regions_book[regions[icell_nonpad]].n_anisotropies+1]*spins[icell+pad]+regions_book[regions[icell_nonpad]].anisotropy_normals[i*regions_book[regions[icell_nonpad]].n_anisotropies+2]*spins[icell+2*pad]);
		gradient[icell] -=  regions_book[regions[icell_nonpad]].anisotropy_normals[i*regions_book[regions[icell_nonpad]].n_anisotropies]*prefactor;
		gradient[icell+pad] -=  regions_book[regions[icell_nonpad]].anisotropy_normals[i*regions_book[regions[icell_nonpad]].n_anisotropies+1]*prefactor;
		gradient[icell+2*pad] -=  regions_book[regions[icell_nonpad]].anisotropy_normals[i*regions_book[regions[icell_nonpad]].n_anisotropies+2]*prefactor;
	}

	//Exchange
	uint icell_plus =(regions_book[regions[xr+y*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? xr+y*WIDTH+3*z*WIDTH*HEIGHT : icell;
	uint icell_minus=(regions_book[regions[xl+y*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? xl+y*WIDTH+3*z*WIDTH*HEIGHT : icell;
	prefactor= regions_book[regions[icell_nonpad]].Aexch*regions_book[regions[icell_nonpad]].Ms_inv* (regions_book[regions[icell_nonpad]].cell_sizes_inv[0]) * (regions_book[regions[icell_nonpad]].cell_sizes_inv[0]);
	gradient[icell] -= prefactor*(spins[icell_plus] - 2 * spins[icell] + spins[icell_minus]);
	gradient[icell+pad] -= prefactor*(spins[icell_plus+pad] - 2 * spins[icell+pad] + spins[icell_minus+pad]) ;
	gradient[icell+2*pad] -= prefactor* (spins[icell_plus+2*pad] - 2 * spins[icell+2*pad] + spins[icell_minus+2*pad]) ;
	
	//DMI
	if ((icell_plus==icell)||(icell_minus==icell)){//boundary
		gradient[icell] +=  regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Ms_inv / regions_book[regions[icell_nonpad]].Aexch* spins[icell];
		gradient[icell+2*pad] +=  regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Ms_inv / regions_book[regions[icell_nonpad]].Aexch* spins[icell+2*pad];
	} else{
		gradient[icell] +=  2*regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Ms_inv * ((spins[icell_plus+2*pad] - spins[icell_minus+2*pad]) * (regions_book[regions[icell_nonpad]].cell_sizes_inv[0]) );
		gradient[icell+2*pad] -=  2*regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Ms_inv * ((spins[icell_plus] - spins[icell_minus]) * (regions_book[regions[icell_nonpad]].cell_sizes_inv[0]) );
	}
	icell_plus =(regions_book[regions[x+yr*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? x+yr*WIDTH+3*z*WIDTH*HEIGHT : icell;
	icell_minus=(regions_book[regions[x+yl*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? x+yl*WIDTH+3*z*WIDTH*HEIGHT : icell;
	prefactor= regions_book[regions[icell_nonpad]].Aexch * regions_book[regions[icell_nonpad]].Ms_inv * (regions_book[regions[icell_nonpad]].cell_sizes_inv[1]) * (regions_book[regions[icell_nonpad]].cell_sizes_inv[1]);
	gradient[icell] -= prefactor* (spins[icell_plus] - 2 * spins[icell] + spins[icell_minus]);
	gradient[icell+pad] -= prefactor* (spins[icell_plus+pad] - 2 * spins[icell+pad] + spins[icell_minus+pad]);
	gradient[icell+2*pad] -= prefactor* (spins[icell_plus+2*pad] - 2 * spins[icell+2*pad] + spins[icell_minus+2*pad]);
	
	if ((icell_plus==icell)||(icell_minus==icell)){//boundary
		gradient[icell+pad] +=  regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Ms_inv / regions_book[regions[icell_nonpad]].Aexch* spins[icell+pad];
		gradient[icell+2*pad] +=  regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Ms_inv / regions_book[regions[icell_nonpad]].Aexch* spins[icell+2*pad];
	} else{
		gradient[icell+pad] += 2*regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Ms_inv * (spins[icell_plus+2*pad] - spins[icell_minus+2*pad]) * (regions_book[regions[icell_nonpad]].cell_sizes_inv[1]);
		gradient[icell+2*pad] -= 2*regions_book[regions[icell_nonpad]].Dmi * regions_book[regions[icell_nonpad]].Ms_inv * (spins[icell_plus+pad] - spins[icell_minus+pad]) * (regions_book[regions[icell_nonpad]].cell_sizes_inv[1]);
	}
	icell_plus =(regions_book[regions[x+y*WIDTH+zr*WIDTH*HEIGHT]].Ms!=0) ? x+y*WIDTH+3*zr*WIDTH*HEIGHT : icell;
	icell_minus=(regions_book[regions[x+y*WIDTH+zl*WIDTH*HEIGHT]].Ms!=0) ? x+y*WIDTH+3*zl*WIDTH*HEIGHT : icell;
	prefactor= regions_book[regions[icell_nonpad]].Aexch * (regions_book[regions[icell_nonpad]].cell_sizes_inv[2]) * (regions_book[regions[icell_nonpad]].cell_sizes_inv[2])* regions_book[regions[icell_nonpad]].Ms_inv;
	gradient[icell] -= prefactor * (spins[icell_plus] - 2 * spins[icell] + spins[icell_minus]);
	gradient[icell+pad] -= prefactor * (spins[icell_plus+pad] - 2 * spins[icell+pad] + spins[icell_minus+pad]);
	gradient[icell+2*pad] -= prefactor * (spins[icell_plus+2*pad] - 2 * spins[icell+2*pad] + spins[icell_minus+2*pad]);
}
