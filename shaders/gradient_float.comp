#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_ARB_gpu_shader_fp64 : enable

#define WORKGROUP_SIZE 32
const float M_PI = radians(180); // #define M_PI 3.14159265358979323846
const float M_SQRT1_2 = 1.0 / sqrt(2.0); // #define M_SQRT1_2 0.707106781186547524401
const float mult=4*M_PI*1e-7;
const uint num_gradient_components=5;

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout (constant_id = 1) const uint sumSubGroupSize = 64;
layout (constant_id = 2) const uint num_components_write = 1;
layout (constant_id = 3) const uint ddi_bool = 0;
layout (constant_id = 4) const uint damping = 0;
layout (constant_id = 5) const uint save_energy = 0;
struct Region{
  float Ms;
  float Ms_inv;
  float minMs;
  float minMs_inv;
  float alpha;
  float Aexch;
  float Aexch_inv;
  float Dmi_interface; 
  float Dmi_bulk; 
  float DDI;
  float external_field_magnitude;
  float external_field_normal[3];
  int n_anisotropies;
  float anisotropy_magnitudes[2];
  float anisotropy_normals[2*3];
  float Kc1;
  float anisotropy_cubic_normals[9];
  float cell_sizes[3];
  float cell_sizes_inv[3];
  float periodic[3];
  float frozen_spins;
};

layout(binding = 0) readonly buffer Spins_Buf
{
   float spins[];
};

layout(binding = 1) buffer Gradient_Buf
{
   float gradient[];
};
layout(binding = 2) readonly buffer Regions_Book
{
   Region regions_book[];
};
layout(binding = 3) readonly buffer Regions_Buf
{
   int regions[];
};

layout(binding = 4) uniform UBO {
    uint WIDTH;
    uint HEIGHT;
    uint DEPTH;
    uint n;
};
layout(std430, binding = 5) writeonly buffer PartialSums
{
   float partial_sums[];
};
layout(std430, binding = 6) buffer Energy
{
   float energy[];
};

//layout (constant_id = 0) const int FORCE_TYPE = 0;
shared float sdata[(num_gradient_components+4)*sumSubGroupSize];

void main() {  
	//return;
	//if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT || gl_GlobalInvocationID.z >= DEPTH)
	//  return;
	uint pad= n;
	
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint z = gl_GlobalInvocationID.z;
	uint icell=x+y*WIDTH+z*WIDTH*HEIGHT;
	uint xl, xr;
	if (regions_book[regions[icell]].periodic[0]==0){
		xl = (x==0) ? x : x-1;
		xr = (x==WIDTH-1) ? x : x+1;
	}else{
		xl = (x==0) ? WIDTH-1 : x-1;
		xr = (x==WIDTH-1) ? 0 : x+1;
	}

	uint yl, yr;
	if (regions_book[regions[icell]].periodic[1]==0){
		yl = (y==0) ? y : y-1;
		yr = (y==HEIGHT-1) ? y : y+1;
	}else{
		yl = (y==0) ? HEIGHT-1 : y-1;
		yr = (y==HEIGHT-1) ? 0 : y+1;
	}

	uint zl, zr;
	if (regions_book[regions[icell]].periodic[2]==0){
		zl = (z==0) ? z : z-1;
		zr = (z==DEPTH-1) ? z : z+1;
	}else{
		zl = (z==0) ? DEPTH-1 : z-1;
		zr = (z==DEPTH-1) ? 0 : z+1;
	}
	
	float gradient_values_x[num_gradient_components];
	float gradient_values_y[num_gradient_components];
	float gradient_values_z[num_gradient_components];
	for (uint i=0; i < num_gradient_components;i++){
		gradient_values_x[i]=0;
		gradient_values_y[i]=0;
		gradient_values_z[i]=0;
	}
	float gradient_total[3]={0.0,0.0,0.0};
	float spins_0[3];
	spins_0[0]=spins[icell];
	spins_0[1]=spins[icell+pad];
	spins_0[2]=spins[icell+2*pad];
	
	if ((regions_book[regions[icell]].Ms!=0) && (regions_book[regions[icell]].frozen_spins==0))
	{
		//return;
		//Zeeman
		//float m0 = (4 * 3.14159265358979)*1e-7;
		vec3 m;
		m.x=spins[icell];
		m.y=spins[icell+pad];
		m.z=spins[icell+2*pad];
		gradient_values_x[0] = -mult*regions_book[regions[icell]].Ms * regions_book[regions[icell]].external_field_magnitude*regions_book[regions[icell]].external_field_normal[0];
		gradient_values_y[0] = -mult*regions_book[regions[icell]].Ms * regions_book[regions[icell]].external_field_magnitude*regions_book[regions[icell]].external_field_normal[1];
		gradient_values_z[0] = -mult*regions_book[regions[icell]].Ms * regions_book[regions[icell]].external_field_magnitude*regions_book[regions[icell]].external_field_normal[2];
		/*
		//Zeeman - Custom field 
		if ((x-WIDTH*0.5f)*(x-WIDTH*0.5f)+(y-HEIGHT*0.5f)*(y-HEIGHT*0.5f) > 0.2*WIDTH*HEIGHT){
		  float norm[3];
		  norm[2]=0;
		  if (x-WIDTH*0.5f==0) { 
			if (y-HEIGHT*0.5f>0) { 
				norm[0]=-1; 
				norm[1]=0;
			} else {
				norm[0]=1; 
				norm[1]=0;
			}
		  } 
		  else {
			if (y-HEIGHT*0.5f==0) { 
				if (x-WIDTH*0.5f>0) { 
				norm[0]=0; 
				norm[1]=1;
				} else {
				norm[0]=0; 
				norm[1]=-1;
				}
			} else {
				if (y-HEIGHT*0.5f>0) { 
					norm[0]=-1; 
					norm[1]=(x-WIDTH*0.5f)/(y-HEIGHT*0.5f);
					norm[0]=norm[0]/sqrt(norm[0]*norm[0]+norm[1]*norm[1]);
					norm[1]=norm[1]/sqrt(norm[0]*norm[0]+norm[1]*norm[1]);}
				else{
					norm[0]=1; 
					norm[1]=-(x-WIDTH*0.5f)/(y-HEIGHT*0.5f);
					norm[0]=norm[0]/sqrt(norm[0]*norm[0]+norm[1]*norm[1]);
					norm[1]=norm[1]/sqrt(norm[0]*norm[0]+norm[1]*norm[1]);
				}
			}
		  }
		  
		  gradient[icell] -= mult*regions_book[regions[icell]].Ms * 1e2*norm[0];
		  gradient[icell+pad] -= mult*regions_book[regions[icell]].Ms * 1e2*norm[1];
		  //gradient[icell+2*pad] -= mult*regions_book[regions[icell]].Ms * regions_book[regions[icell]].external_field_magnitude*regions_book[regions[icell]].external_field_normal[2];
		}*/
		
		//Anisotropy
		float prefactor_anis=0;
		for (uint i = 0; i < regions_book[regions[icell]].n_anisotropies; i++)
		{
			prefactor_anis = 2.0 * regions_book[regions[icell]].anisotropy_magnitudes[i] * regions_book[regions[icell]].Ms_inv * (regions_book[regions[icell]].anisotropy_normals[i*regions_book[regions[icell]].n_anisotropies]*spins[icell]+regions_book[regions[icell]].anisotropy_normals[i*regions_book[regions[icell]].n_anisotropies+1]*spins[icell+pad]+regions_book[regions[icell]].anisotropy_normals[i*regions_book[regions[icell]].n_anisotropies+2]*spins[icell+2*pad]);
			gradient_values_x[1] -=  regions_book[regions[icell]].anisotropy_normals[i*regions_book[regions[icell]].n_anisotropies]*prefactor_anis;
			gradient_values_y[1] -=  regions_book[regions[icell]].anisotropy_normals[i*regions_book[regions[icell]].n_anisotropies+1]*prefactor_anis;
			gradient_values_z[1] -=  regions_book[regions[icell]].anisotropy_normals[i*regions_book[regions[icell]].n_anisotropies+2]*prefactor_anis;
		}
		//Cubic anisotropy
		prefactor_anis = 2.0 * regions_book[regions[icell]].Kc1 * regions_book[regions[icell]].Ms_inv;
		if (prefactor_anis!=0){
			vec3 c1;
			vec3 c2;
			vec3 c3;
			vec3 out_cubic=vec3(0,0,0);
			c1.x=regions_book[regions[icell]].anisotropy_cubic_normals[0];
			c1.y=regions_book[regions[icell]].anisotropy_cubic_normals[1];
			c1.z=regions_book[regions[icell]].anisotropy_cubic_normals[2];
			c2.x=regions_book[regions[icell]].anisotropy_cubic_normals[3];
			c2.y=regions_book[regions[icell]].anisotropy_cubic_normals[4];
			c2.z=regions_book[regions[icell]].anisotropy_cubic_normals[5];
			c3.x=regions_book[regions[icell]].anisotropy_cubic_normals[6];
			c3.y=regions_book[regions[icell]].anisotropy_cubic_normals[7];
			c3.z=regions_book[regions[icell]].anisotropy_cubic_normals[8];
			out_cubic +=  (dot(c2,m)*dot(c2,m)+dot(c3,m)*dot(c3,m))*dot(c1,m)*c1;
			out_cubic +=  (dot(c1,m)*dot(c1,m)+dot(c3,m)*dot(c3,m))*dot(c2,m)*c2;
			out_cubic +=  (dot(c1,m)*dot(c1,m)+dot(c2,m)*dot(c2,m))*dot(c3,m)*c3;
			out_cubic*=prefactor_anis;
			gradient_values_x[1]+=out_cubic.x;
			gradient_values_y[1]+=out_cubic.y;
			gradient_values_z[1]+=out_cubic.z;
			
		}
		//Exchange
		
		float spins_plus[3];
		float spins_minus[3];
		float prefactor;
		
		uint icell_plus =(regions_book[regions[xr+y*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? xr+y*WIDTH+z*WIDTH*HEIGHT : icell;
		//uint icell_plus2 =(regions_book[regions[xrr+y*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? xrr+y*WIDTH+z*WIDTH*HEIGHT : icell_plus;
		uint icell_minus=(regions_book[regions[xl+y*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? xl+y*WIDTH+z*WIDTH*HEIGHT : icell;
		//uint icell_minus2=(regions_book[regions[xll+y*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? xll+y*WIDTH+z*WIDTH*HEIGHT : icell_minus;
		
		prefactor= 2*regions_book[regions[icell]].Aexch*regions_book[regions[icell]].Ms_inv* (regions_book[regions[icell]].cell_sizes_inv[0]) ;
		spins_plus[0]=spins[icell_plus];
		spins_plus[1]=spins[icell_plus+pad];
		spins_plus[2]=spins[icell_plus+2*pad];
		spins_minus[0]=spins[icell_minus];
		spins_minus[1]=spins[icell_minus+pad];
		spins_minus[2]=spins[icell_minus+2*pad];
		
		if (icell_plus==icell){//boundary
			gradient_values_x[2] -= prefactor*((-spins_0[0] + spins_minus[0])* (regions_book[regions[icell]].cell_sizes_inv[0])-0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
			gradient_values_y[2] -= prefactor*((-spins_0[1] + spins_minus[1])* (regions_book[regions[icell]].cell_sizes_inv[0])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
			gradient_values_z[2] -= prefactor*((-spins_0[2] + spins_minus[2])* (regions_book[regions[icell]].cell_sizes_inv[0])+0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[0]+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
			
			gradient_values_x[3] -= regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * ((spins_0[2] - spins_minus[2]) * (regions_book[regions[icell]].cell_sizes_inv[0])+0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
			gradient_values_z[3] += regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * ((spins_0[0] - spins_minus[0]) * (regions_book[regions[icell]].cell_sizes_inv[0])-0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
		
			gradient_values_y[3] -= regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_0[2] - spins_minus[2]) * (regions_book[regions[icell]].cell_sizes_inv[0])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
			gradient_values_z[3] += regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_0[1] - spins_minus[1]) * (regions_book[regions[icell]].cell_sizes_inv[0])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
		
		} 
		else{
			if (icell_minus==icell){//boundary
				gradient_values_x[2] -= prefactor*((spins_plus[0] -spins_0[0])* (regions_book[regions[icell]].cell_sizes_inv[0])+0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
				gradient_values_y[2] -= prefactor*((spins_plus[1] -spins_0[1] )* (regions_book[regions[icell]].cell_sizes_inv[0])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
				gradient_values_z[2] -= prefactor*((spins_plus[2] -spins_0[2])* (regions_book[regions[icell]].cell_sizes_inv[0])-0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[0]-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
		
				gradient_values_x[3] -= regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * ((spins_plus[2] - spins_0[2]) * (regions_book[regions[icell]].cell_sizes_inv[0])+0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
				gradient_values_z[3] += regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * ((spins_plus[0] - spins_0[0]) * (regions_book[regions[icell]].cell_sizes_inv[0])-0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
				
				gradient_values_y[3] -= regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_plus[2] - spins_0[2]) * (regions_book[regions[icell]].cell_sizes_inv[0])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
				gradient_values_z[3] += regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_plus[1] - spins_0[1]) * (regions_book[regions[icell]].cell_sizes_inv[0])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
			
			} else {
			
				gradient_values_x[2] -= prefactor*((spins_plus[0] - spins_0[0]) + (spins_minus[0]- spins_0[0]))* (regions_book[regions[icell]].cell_sizes_inv[0]);
				gradient_values_y[2] -= prefactor*((spins_plus[1] -  spins_0[1]) + (spins_minus[1]- spins_0[1]))* (regions_book[regions[icell]].cell_sizes_inv[0]) ;
				gradient_values_z[2] -= prefactor* ((spins_plus[2] - spins_0[2]) +( spins_minus[2]- spins_0[2]))* (regions_book[regions[icell]].cell_sizes_inv[0]) ;
				
				gradient_values_x[3] -= regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * (spins_plus[2] - spins_minus[2]) * (regions_book[regions[icell]].cell_sizes_inv[0]);
				gradient_values_z[3] += regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * (spins_plus[0] - spins_minus[0]) * (regions_book[regions[icell]].cell_sizes_inv[0]);
				
				gradient_values_y[3] -= regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * (spins_plus[2] - spins_minus[2]) * (regions_book[regions[icell]].cell_sizes_inv[0]);
				gradient_values_z[3] += regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * (spins_plus[1] - spins_minus[1]) * (regions_book[regions[icell]].cell_sizes_inv[0]);
				
			}
		}
		
		icell_plus =(regions_book[regions[x+yr*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? x+yr*WIDTH+z*WIDTH*HEIGHT : icell;
		//icell_plus2 =(regions_book[regions[x+yrr*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? x+yrr*WIDTH+z*WIDTH*HEIGHT : icell_plus;
		icell_minus=(regions_book[regions[x+yl*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? x+yl*WIDTH+z*WIDTH*HEIGHT : icell;
		//icell_minus2=(regions_book[regions[x+yll*WIDTH+z*WIDTH*HEIGHT]].Ms!=0) ? x+yll*WIDTH+z*WIDTH*HEIGHT : icell_minus;
		spins_plus[0]=spins[icell_plus];
		spins_plus[1]=spins[icell_plus+pad];
		spins_plus[2]=spins[icell_plus+2*pad];
		spins_minus[0]=spins[icell_minus];
		spins_minus[1]=spins[icell_minus+pad];
		spins_minus[2]=spins[icell_minus+2*pad];
		prefactor= 2*regions_book[regions[icell]].Aexch*regions_book[regions[icell]].Ms_inv* (regions_book[regions[icell]].cell_sizes_inv[1]);
		
		if (icell_plus==icell){//boundary
			gradient_values_x[2] -= prefactor*((-spins_0[0] + spins_minus[0])* (regions_book[regions[icell]].cell_sizes_inv[1])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
			gradient_values_y[2] -= prefactor*((-spins_0[1] + spins_minus[1])* (regions_book[regions[icell]].cell_sizes_inv[1])-0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
			gradient_values_z[2] -= prefactor*((-spins_0[2] + spins_minus[2])* (regions_book[regions[icell]].cell_sizes_inv[1])+0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[1]-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
			
			gradient_values_y[3] -= regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * ((spins_0[2] - spins_minus[2]) * (regions_book[regions[icell]].cell_sizes_inv[1])+0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
			gradient_values_z[3] += regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * ((spins_0[1] - spins_minus[1]) * (regions_book[regions[icell]].cell_sizes_inv[1])-0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
			
			gradient_values_x[3] += regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_0[2] - spins_minus[2]) * (regions_book[regions[icell]].cell_sizes_inv[1])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
			gradient_values_z[3] -= regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_0[0] - spins_minus[0]) * (regions_book[regions[icell]].cell_sizes_inv[1])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
			
		} 
		else{
			
			if (icell_minus==icell){//boundary
				gradient_values_x[2] -= prefactor*((spins_plus[0] -spins_0[0])* (regions_book[regions[icell]].cell_sizes_inv[1])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
				gradient_values_y[2] -= prefactor*((spins_plus[1] -spins_0[1] )* (regions_book[regions[icell]].cell_sizes_inv[1])+0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
				gradient_values_z[2] -= prefactor*((spins_plus[2] -spins_0[2])* (regions_book[regions[icell]].cell_sizes_inv[1])-0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[1]+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
		
				gradient_values_y[3] -= regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * ((spins_plus[2] - spins_0[2]) * (regions_book[regions[icell]].cell_sizes_inv[1])+0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
				gradient_values_z[3] += regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * ((spins_plus[1] - spins_0[1]) * (regions_book[regions[icell]].cell_sizes_inv[1])-0.5*regions_book[regions[icell]].Dmi_interface*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
				
				gradient_values_x[3] += regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_plus[2] - spins_0[2]) * (regions_book[regions[icell]].cell_sizes_inv[1])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
				gradient_values_z[3] -= regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_plus[0] - spins_0[0]) * (regions_book[regions[icell]].cell_sizes_inv[1])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[2]);
			
			} else {
				
					gradient_values_x[2] -= prefactor*((spins_plus[0] - spins_0[0]) + (spins_minus[0]- spins_0[0]))* (regions_book[regions[icell]].cell_sizes_inv[1]);
					gradient_values_y[2] -= prefactor*((spins_plus[1] -  spins_0[1]) + (spins_minus[1]- spins_0[1]))* (regions_book[regions[icell]].cell_sizes_inv[1]) ;
					gradient_values_z[2] -= prefactor* ((spins_plus[2] - spins_0[2]) +( spins_minus[2]- spins_0[2]))* (regions_book[regions[icell]].cell_sizes_inv[1]) ;
					
					gradient_values_y[3] -= regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * (spins_plus[2] - spins_minus[2]) * (regions_book[regions[icell]].cell_sizes_inv[1]);
					gradient_values_z[3] += regions_book[regions[icell]].Dmi_interface * regions_book[regions[icell]].Ms_inv * (spins_plus[1] - spins_minus[1]) * (regions_book[regions[icell]].cell_sizes_inv[1]);
					
					gradient_values_x[3] += regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * (spins_plus[2] - spins_minus[2]) * (regions_book[regions[icell]].cell_sizes_inv[1]);
					gradient_values_z[3] -= regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * (spins_plus[0] - spins_minus[0]) * (regions_book[regions[icell]].cell_sizes_inv[1]);
			
			}
			
		}
		
		icell_plus =(regions_book[regions[x+y*WIDTH+zr*WIDTH*HEIGHT]].Ms!=0) ? x+y*WIDTH+zr*WIDTH*HEIGHT : icell;
		//icell_plus =((regions_book[regions[x+y*WIDTH+zr*WIDTH*HEIGHT]].Ms!=0)&&(regions_book[regions[x+y*WIDTH+zr*WIDTH*HEIGHT]].Dmi_bulk!=0)) ? x+y*WIDTH+zr*WIDTH*HEIGHT : icell;
		//icell_plus2 =(regions_book[regions[x+y*WIDTH+zrr*WIDTH*HEIGHT]].Ms!=0) ? x+y*WIDTH+zrr*WIDTH*HEIGHT : icell_plus;
		icell_minus=(regions_book[regions[x+y*WIDTH+zl*WIDTH*HEIGHT]].Ms!=0) ? x+y*WIDTH+zl*WIDTH*HEIGHT : icell;
		//icell_minus=((regions_book[regions[x+y*WIDTH+zl*WIDTH*HEIGHT]].Ms!=0)&&(regions_book[regions[x+y*WIDTH+zl*WIDTH*HEIGHT]].Dmi_bulk!=0)) ? x+y*WIDTH+zl*WIDTH*HEIGHT : icell;
		//icell_minus2=(regions_book[regions[x+y*WIDTH+zll*WIDTH*HEIGHT]].Ms!=0) ? x+y*WIDTH+zll*WIDTH*HEIGHT : icell_minus;
		spins_plus[0]=spins[icell_plus];
		spins_plus[1]=spins[icell_plus+pad];
		spins_plus[2]=spins[icell_plus+2*pad];
		spins_minus[0]=spins[icell_minus];
		spins_minus[1]=spins[icell_minus+pad];
		spins_minus[2]=spins[icell_minus+2*pad];
		prefactor= 2*regions_book[regions[icell]].Aexch*regions_book[regions[icell]].Ms_inv* (regions_book[regions[icell]].cell_sizes_inv[2]) ;
		
		if (icell_plus==icell){//boundary

			gradient_values_x[2] -= prefactor*((-spins_0[0] + spins_minus[0])* (regions_book[regions[icell]].cell_sizes_inv[2])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
			gradient_values_y[2] -= prefactor*((-spins_0[1] + spins_minus[1])* (regions_book[regions[icell]].cell_sizes_inv[2])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
			gradient_values_z[2] -= prefactor*((-spins_0[2] + spins_minus[2])* (regions_book[regions[icell]].cell_sizes_inv[2]));
			
			gradient_values_x[3] -= regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_0[1] - spins_minus[1]) * (regions_book[regions[icell]].cell_sizes_inv[2])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
			gradient_values_y[3] += regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_0[0] - spins_minus[0]) * (regions_book[regions[icell]].cell_sizes_inv[2])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
				
		
		}else{
			
			if (icell_minus==icell){//boundary
				gradient_values_x[2] -= prefactor*((spins_plus[0] -spins_0[0])* (regions_book[regions[icell]].cell_sizes_inv[2])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
				gradient_values_y[2] -= prefactor*((spins_plus[1] - spins_0[1])* (regions_book[regions[icell]].cell_sizes_inv[2])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
				gradient_values_z[2] -= prefactor*((spins_plus[2] - spins_0[2])* (regions_book[regions[icell]].cell_sizes_inv[2]));
				
				gradient_values_x[3] -= regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_plus[1] - spins_0[1]) * (regions_book[regions[icell]].cell_sizes_inv[2])+0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[0]);
				gradient_values_y[3] += regions_book[regions[icell]].Dmi_bulk * regions_book[regions[icell]].Ms_inv * ((spins_plus[0] - spins_0[0]) * (regions_book[regions[icell]].cell_sizes_inv[2])-0.5*regions_book[regions[icell]].Dmi_bulk*regions_book[regions[icell]].Aexch_inv*spins_0[1]);
		
			}else {
				uint icell_plus=x+y*WIDTH+zr*WIDTH*HEIGHT;
				uint icell_minus=x+y*WIDTH+zl*WIDTH*HEIGHT;
				float Dl=regions_book[regions[icell_minus]].Dmi_bulk;
				float Dr=regions_book[regions[icell_plus]].Dmi_bulk;
				float D=regions_book[regions[icell]].Dmi_bulk;
				float Dll=sqrt(D*Dl);
				float Drr=sqrt(D*Dr);
				
				gradient_values_x[2] -= prefactor*((spins_plus[0] - spins_0[0]) + (spins_minus[0]- spins_0[0]))* (regions_book[regions[icell]].cell_sizes_inv[2]);
				gradient_values_y[2] -= prefactor*((spins_plus[1] -  spins_0[1]) + (spins_minus[1]- spins_0[1]))* (regions_book[regions[icell]].cell_sizes_inv[2]) ;
				gradient_values_z[2] -= prefactor* ((spins_plus[2] - spins_0[2]) +( spins_minus[2]- spins_0[2]))* (regions_book[regions[icell]].cell_sizes_inv[2]) ;
				
				gradient_values_x[3] -= regions_book[regions[icell]].Ms_inv * (Drr*spins_plus[1] - Dll*spins_minus[1]) * (regions_book[regions[icell]].cell_sizes_inv[2]);
				gradient_values_y[3] += regions_book[regions[icell]].Ms_inv * (Drr*spins_plus[0] - Dll*spins_minus[0]) * (regions_book[regions[icell]].cell_sizes_inv[2]);
			
			}
		}	
		
		//DDI leftovers
		if (ddi_bool==1){
			gradient_values_x[4]=-regions_book[regions[icell]].DDI*mult*regions_book[regions[icell]].Ms*gradient[icell];
			gradient_values_y[4]=-regions_book[regions[icell]].DDI*mult*regions_book[regions[icell]].Ms*gradient[icell+pad];
			gradient_values_z[4]=-regions_book[regions[icell]].DDI*mult*regions_book[regions[icell]].Ms*gradient[icell+2*pad];
		}
		
	}

	
	for (uint i=0; i < num_gradient_components;i++){
		gradient_total[0]+=gradient_values_x[i];
		gradient_total[1]+=gradient_values_y[i];
		gradient_total[2]+=gradient_values_z[i];
		//reduceEnergy[i]=0;
	}
	float torque[3]={0,0,0};
	if (damping==1){

		gradient[icell]=gradient_total[0]+regions_book[regions[icell]].alpha*(spins[icell+pad]*gradient_total[2]-spins[icell+2*pad]*gradient_total[1])/(1+regions_book[regions[icell]].alpha*regions_book[regions[icell]].alpha);
		gradient[icell+pad]=gradient_total[1]+regions_book[regions[icell]].alpha*(spins[icell+2*pad]*gradient_total[0]-spins[icell]*gradient_total[2])/(1+regions_book[regions[icell]].alpha*regions_book[regions[icell]].alpha);
		gradient[icell+2*pad]=gradient_total[2]+regions_book[regions[icell]].alpha*(spins[icell]*gradient_total[1]-spins[icell+pad]*gradient_total[0])/(1+regions_book[regions[icell]].alpha*regions_book[regions[icell]].alpha);
		//torque
		torque[0]=-spins_0[1]*gradient[icell+2*pad]+spins_0[2]*gradient[icell+pad];
		torque[1]=spins_0[0]*gradient[icell+2*pad]-spins_0[2]*gradient[icell];
		torque[2]=-spins_0[0]*gradient[icell+pad]+spins_0[1]*gradient[icell];
	}else{
		
		gradient[icell]=gradient_total[0];
		gradient[icell+pad]=gradient_total[1];
		gradient[icell+2*pad]=gradient_total[2];
		//torque
		/*
		torque[0]=-spins_0[1]*gradient_total[2]+spins_0[2]*gradient_total[1];
		torque[1]=spins_0[0]*gradient_total[2]-spins_0[2]*gradient_total[0];
		torque[2]=-spins_0[0]*gradient_total[1]+spins_0[1]*gradient_total[0];*/
		
		torque[0]=float(-double(spins_0[1])*double(gradient_total[2])+double(spins_0[2])*double(gradient_total[1]));
		torque[1]=float(double(spins_0[0])*double(gradient_total[2])-double(spins_0[2])*double(gradient_total[0]));
		torque[2]=float(-double(spins_0[0])*double(gradient_total[1])+double(spins_0[1])*double(gradient_total[0]));
	}
	gradient[icell+3*n]=torque[0];
	gradient[icell+3*n+pad]=torque[1];
	gradient[icell+3*n+2*pad]=torque[2];
	
	for (int i=2; i< num_components_write;i++){
		gradient[icell+i*3*n]=gradient_values_x[i-2];
		gradient[icell+pad+i*3*n]=gradient_values_y[i-2];
		gradient[icell+2*pad+i*3*n]=gradient_values_z[i-2];
	}
	if (save_energy==1){
		
		float reduceEnergy[num_gradient_components];
		float mx=0.0;
		float my=0.0;
		float mz=0.0;
		float max_torque=0.0;
		for (uint i=0; i < num_gradient_components;i++){
			reduceEnergy[i] = gradient_values_x[i]*spins_0[0];
			reduceEnergy[i] += gradient_values_y[i]*spins_0[1];
			reduceEnergy[i] += gradient_values_z[i]*spins_0[2];
		}
		float energy_output=2*reduceEnergy[0];
		for (uint i=1; i < num_gradient_components;i++){
			energy_output+=reduceEnergy[i];
		}
		energy[n+icell]=energy[icell];
		energy[icell]=energy_output;
		
		mx = spins[icell];
		my = spins[icell+pad];
		mz = spins[icell+2*pad];
		max_torque=torque[0]*torque[0]+torque[1]*torque[1]+torque[2]*torque[2];
		
		for (uint i=0; i < num_gradient_components;i++){
			reduceEnergy[i] = subgroupAdd(reduceEnergy[i]);
		}

		mx = subgroupAdd(mx);
		my = subgroupAdd(my);
		mz = subgroupAdd(mz);
		max_torque = subgroupMax(max_torque);
		if (gl_SubgroupInvocationID == 0)
		{
			for (uint i=0; i < num_gradient_components;i++){
				sdata[gl_SubgroupID+i*sumSubGroupSize]=reduceEnergy[i];
			}
			sdata[gl_SubgroupID+num_gradient_components*sumSubGroupSize] = mx;
			sdata[gl_SubgroupID+(num_gradient_components+1)*sumSubGroupSize] = my;
			sdata[gl_SubgroupID+(num_gradient_components+2)*sumSubGroupSize] = mz;
			sdata[gl_SubgroupID+(num_gradient_components+3)*sumSubGroupSize] = max_torque;
		}

		memoryBarrierShared();
		barrier();

		if (gl_SubgroupID == 0)
		{
			for (uint i=0; i < num_gradient_components;i++){
				reduceEnergy[i] = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID+i*sumSubGroupSize] : 0;
				reduceEnergy[i] = subgroupAdd(reduceEnergy[i]);
			}
			mx= gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID+num_gradient_components*sumSubGroupSize] : 0;
			mx = subgroupAdd(mx);
			
			my= gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID+(num_gradient_components+1)*sumSubGroupSize] : 0;
			my = subgroupAdd(my);
			
			mz= gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID+(num_gradient_components+2)*sumSubGroupSize] : 0;
			mz = subgroupAdd(mz);
			
			max_torque= gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID+(num_gradient_components+3)*sumSubGroupSize] : 0;
			max_torque = subgroupMax(max_torque);
		}

		if (gl_LocalInvocationID.x+gl_LocalInvocationID.y*gl_WorkGroupSize.x == 0)
		{
			uint work_ID=gl_WorkGroupID.x+gl_WorkGroupID.y*gl_NumWorkGroups.x+gl_WorkGroupID.z*gl_NumWorkGroups.x*gl_NumWorkGroups.y;
			uint num_WorkGroups=gl_NumWorkGroups.x*gl_NumWorkGroups.y*gl_NumWorkGroups.z;
			
			for (uint i=0; i < num_gradient_components;i++){
				partial_sums[work_ID+i*num_WorkGroups]=reduceEnergy[i];
			}
			
			partial_sums[work_ID+num_gradient_components*num_WorkGroups] = mx;
			partial_sums[work_ID+(num_gradient_components+1)*num_WorkGroups] = my;
			partial_sums[work_ID+(num_gradient_components+2)*num_WorkGroups] = mz;
			partial_sums[work_ID+(num_gradient_components+3)*num_WorkGroups] = max_torque;
		}
	}
}
