#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(std430, binding = 0) readonly buffer Input
{
   float inputs[];
};
layout(std430, binding = 1) writeonly buffer PartialSums
{
   float partial_sums[];
};
layout(binding = 2) buffer local_iteration
{
   uint iteration []; // 0-local_iter;
};
layout (local_size_x_id = 1) in;
layout (constant_id = 2) const uint sumSubGroupSize = 64;
layout (constant_id = 3) const uint num_reduce = 1;
layout(push_constant) uniform PushConsts
{
  uint n;

} consts;

shared float sdata[num_reduce*sumSubGroupSize];

void main()
{
	if(iteration[0]!=0){
		float sum[num_reduce];
		for (uint i=0;i<num_reduce;i++){
			sum[i] =0;
		}
		if (gl_GlobalInvocationID.x < consts.n)
		{	
			for (uint i=0;i<num_reduce;i++){
				sum[i] = inputs[gl_GlobalInvocationID.x+i*consts.n];
			}
		}
		for (uint i=0;i<num_reduce;i++){
			sum[i] = subgroupAdd(sum[i]);
		}



		if (gl_SubgroupInvocationID == 0)
		{
			for (uint i=0;i<num_reduce;i++){
				sdata[gl_SubgroupID+i*sumSubGroupSize] = sum[i];
			}
			
		}

		memoryBarrierShared();
		barrier();

		if (gl_SubgroupID == 0)
		{
			for (uint i=0;i<num_reduce;i++){
				sum[i] = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID+i*sumSubGroupSize] : 0;
				sum[i] = subgroupAdd(sum[i]);
			}
		}

		if (gl_LocalInvocationID.x == 0)
		{
			for (uint i=0;i<num_reduce;i++){
		
				partial_sums[gl_WorkGroupID.x+i*gl_NumWorkGroups.x] = sum[i];
			}
		}
	}
}
