#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (local_size_x_id = 1) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;

layout(binding = 0) readonly buffer Data0
{
   float d_a [];
};

layout(binding = 1) readonly buffer Data1
{
   float q_vec [];
};
layout(binding = 2) buffer local_iteration
{
   uint iteration []; // 0-local_iter;
};
layout(std430, binding = 3) writeonly buffer PartialSums
{
   float partial_sums[];
};

layout(push_constant) uniform PushConsts
{
  uint num_mem;
  uint nos;
  uint pad;
  float eps;
  uint k;
  float max_move;
} consts;

shared float sdata[sumSubGroupSize];

void main() {
	if (iteration[gl_WorkGroupID.x]!=0){
		uint i=iteration[gl_WorkGroupID.x]%consts.num_mem;
		uint c=(consts.k+i+1)%consts.num_mem;
		float dot = 0.0;
		if (gl_GlobalInvocationID.x < consts.nos*3)
		{
			dot = d_a[gl_GlobalInvocationID.x+c*consts.nos*3]*q_vec[gl_GlobalInvocationID.x];
		}
		dot = subgroupAdd(dot);

		if (gl_SubgroupInvocationID == 0)
		{
			sdata[gl_SubgroupID] = dot;
		}

		memoryBarrierShared();
		barrier();

		if (gl_SubgroupID == 0)
		{
			dot = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID] : 0;
			dot = subgroupAdd(dot);
			
		}

		if (gl_LocalInvocationID.x == 0)
		{
			partial_sums[gl_WorkGroupID.x] = dot;
		}
	}
}
