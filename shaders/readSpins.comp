#version 450
#extension GL_ARB_separate_shader_objects : enable

struct Region{
  float Ms;
  float Ms_inv;
  float minMs;
  float minMs_inv;
  float alpha;
  float Aexch;
  float Aexch_inv;
  float Dmi_interface; 
  float Dmi_bulk; 
  float DDI;
  float external_field_magnitude;
  float external_field_normal[3];
  int n_anisotropies;
  float anisotropy_magnitudes[2];
  float anisotropy_normals[2*3];
  float Kc1;
  float anisotropy_cubic_normals[9];
  float cell_sizes[3];
  float cell_sizes_inv[3];
  float periodic[3];
  float frozen_spins;
};
layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in;
layout (constant_id = 4) const uint WIDTH = 1;
layout (constant_id = 5) const uint HEIGHT = 1;
layout (constant_id = 6) const uint DEPTH = 1;
layout (constant_id = 7) const uint pad = 1;


layout(binding = 0) readonly buffer DataIn
{
   float datain [];
};

layout(binding = 1) writeonly buffer DataOut
{
   float dataout [];
};
layout(binding = 2) readonly buffer Regions_Book
{
   Region regions_book[];
};
layout(binding = 3) readonly buffer Regions_Buf
{
   int regions[];
};
void main() {
	uint z = gl_GlobalInvocationID.x/WIDTH/HEIGHT;
	uint y = (gl_GlobalInvocationID.x- z *HEIGHT*WIDTH)/WIDTH;
	uint x = gl_GlobalInvocationID.x- z  *HEIGHT*WIDTH - y*WIDTH;

	uint id_out=gl_GlobalInvocationID.x;
    uint id_in=3*(id_out);

	if (regions_book[regions[id_out]].Ms==0){
		dataout[id_out]=0;
		dataout[id_out+pad]=0;
		dataout[id_out+2*pad]=0;
	}else{
		dataout[id_out]=datain[id_in];
		dataout[id_out+pad]=datain[id_in+1];
		dataout[id_out+2*pad]=datain[id_in+2];
	}

}
