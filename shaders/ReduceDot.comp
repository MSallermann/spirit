#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(std430, binding = 0) readonly buffer Input
{
   float inputs[];
};
layout(std430, binding = 1) readonly buffer Input2
{
   float inputs2[];
};
layout(std430, binding = 2) writeonly buffer PartialSums
{
   float partial_sums[];
};

layout (local_size_x_id = 1) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;

layout(push_constant) uniform PushConsts
{
  uint n;
  uint offset1;
  uint offset2;
  uint pad;
} consts;

shared float sdata[sumSubGroupSize];

void main()
{
    float dot = 0.0;

    if (gl_GlobalInvocationID.x < 3*consts.n)
    {
        dot = inputs[(consts.offset1+gl_GlobalInvocationID.x)]*inputs2[(consts.offset2+gl_GlobalInvocationID.x)];
    }

    dot = subgroupAdd(dot);


    if (gl_SubgroupInvocationID == 0)
    {
        sdata[gl_SubgroupID] = dot;
    }

    memoryBarrierShared();
    barrier();

    if (gl_SubgroupID == 0)
    {
        dot = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID] : 0;
        dot = subgroupAdd(dot);

    }

    if (gl_LocalInvocationID.x == 0)
    {
        partial_sums[gl_WorkGroupID.x] = dot;
    }
}
